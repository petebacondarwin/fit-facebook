(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
var ngModule = angular.module('FitFacebook', ['ngAnimate', 'ngRoute', 'ngMessages', 'ngCookies', 'ngSanitize', 'ngResource', 'underscore', 'angularMoment', 'ff.dashboardModule', 'ff.newsModule', 'ff.friendModule', 'ff.coreModule']);
require('./components/ng-underscore/ng-underscore.js');
require('./modules/ff-core/ff.core.app.js');
require('./modules/ff-friend/ff.friend.app.js');
require('./modules/ff-news/ff.news.app.js');
require('./modules/ff-dashboard/ff.dashboard.app.js');


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/app.js
},{"./components/ng-underscore/ng-underscore.js":2,"./modules/ff-core/ff.core.app.js":3,"./modules/ff-dashboard/ff.dashboard.app.js":7,"./modules/ff-friend/ff.friend.app.js":10,"./modules/ff-news/ff.news.app.js":14}],2:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
angular.module('underscore', []).factory('_', function() {
  return window._;
});


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/components/ng-underscore/ng-underscore.js
},{}],3:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
var service = require('./ff.core.service.js');
angular.module('ff.coreModule', []).controller('ffCoreController', require('./ff.core.controller.js')).service(service.name, service.service).constant('ffToken', '').config(require('./ff.core.config.js'));


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-core/ff.core.app.js
},{"./ff.core.config.js":4,"./ff.core.controller.js":5,"./ff.core.service.js":6}],4:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function config($locationProvider, $httpProvider, ffToken) {
  $locationProvider.html5Mode(true);
  $httpProvider.interceptors.push(['$rootScope', function($rootScope) {
    return {'request': function(config) {
        return addToken(config);
      }};
    function addToken(config) {
      if (shouldNotAddToken(config))
        return config;
      if (config.url.indexOf('facebook') > 0) {
        return formatFacebookUrl(config);
      }
      return config;
    }
    function formatFacebookUrl(config) {
      var signal = config.url.indexOf('?') > 0 ? '&' : '?';
      config.url = 'https:/graph.facebook.com/v2.4/' + config.url.replace('/facebook/', '') + signal + 'access_token=' + $rootScope.token + '&debug=all&format=json&method=' + config.method.toLowerCase() + '&pretty=0&suppress_http_code=1';
      return config;
    }
    function shouldNotAddToken(config) {
      return (!$rootScope.token || config.url.indexOf('.html') > 0);
    }
  }]);
}
module.exports = ['$locationProvider', '$httpProvider', 'ffToken', config];


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-core/ff.core.config.js
},{}],5:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffCoreController($scope, $location, ffToken, $window, $rootScope, $http, ffCoreService) {
  var vm = this;
  var code;
  vm.formatDate = formatDate;
  vm.facebookUrl = 'https://www.facebook.com/dialog/oauth?client_id=155870204744672&redirect_uri=http://localhost:8888/&expiry=86400&scope=email,user_posts,publish_actions,user_friends,user_status,user_games_activity,user_actions.fitness';
  vm.headerUrl = './modules/ff-core/ff.core.header.tmpl.html';
  vm.footerUrl = './modules/ff-core/ff.core.footer.tmpl.html';
  ffCoreService.clearAll();
  loadToken();
  clearUrl();
  function formatDate(date) {
    var dateOut = new Date(date);
    return dateOut;
  }
  ;
  function loadToken() {
    if (!$window.location.search)
      return;
    code = getParameterByName('code');
    $http.get('/authorize/?code=' + code).success(getToken).error(failToGetToken);
  }
  function getToken(data) {
    vm.token = $rootScope.token = data.access_token;
    loadUserInfo();
  }
  function failToGetToken(error) {
    vm.errorMessage = error;
  }
  function loadUserInfo() {
    ffCoreService.getUserInfo(updateUserInfo);
  }
  function updateUserInfo(userInfo) {
    vm.userInfo = userInfo;
  }
  function clearUrl() {
    history.pushState("", document.title, $window.location.pathname);
  }
  function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec($window.location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
  }
}
module.exports = ['$scope', '$location', 'ffToken', '$window', '$rootScope', '$http', 'ffCoreService', ffCoreController];


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-core/ff.core.controller.js
},{}],6:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffCoreService($http, $rootScope) {
  var _userInfo;
  return {
    getUserInfo: getUserInfo,
    clearAll: clearAll
  };
  function clearAll() {
    _userInfo = undefined;
  }
  function loadUserInfo(fn) {
    $http.get('/facebook/me').success(function(result) {
      _userInfo = $rootScope.userInfo = result;
      if (fn) {
        fn(_userInfo);
      }
    }).error(function(error) {
      console.error('failed to load users information from facebook');
    });
  }
  function getUserInfo(fn) {
    if (!_userInfo) {
      loadUserInfo(fn);
    } else {
      fn(_userInfo);
    }
  }
}
module.exports = {
  service: ['$http', '$rootScope', ffCoreService],
  name: 'ffCoreService'
};


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-core/ff.core.service.js
},{}],7:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
angular.module('ff.dashboardModule', []).config(require('./ff.dashboard.routes.js')).controller('ffDashboardController', require('./ff.dashboard.controller.js'));


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-dashboard/ff.dashboard.app.js
},{"./ff.dashboard.controller.js":8,"./ff.dashboard.routes.js":9}],8:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffDashboardController($scope) {
  var vm = this;
}
module.exports = ['$scope', ffDashboardController];


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-dashboard/ff.dashboard.controller.js
},{}],9:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
module.exports = ['$routeProvider', function($routeProvider) {
  $routeProvider.when('/', {
    controller: 'ffDashboardController as vm',
    templateUrl: './modules/ff-dashboard/ff.dashboard.tmpl.html'
  });
}];


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-dashboard/ff.dashboard.routes.js
},{}],10:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
var friendController = require('./ff.friend.controller.js');
var friendService = require('./ff.friend.service.js');
angular.module('ff.friendModule', []).config(require('./ff.friend.routes.js')).factory(friendService.name, friendService.service).controller(friendController.name, friendController.controller);


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-friend/ff.friend.app.js
},{"./ff.friend.controller.js":11,"./ff.friend.routes.js":12,"./ff.friend.service.js":13}],11:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffFriendController($scope, ffFriendService) {
  var vm = this;
  ffFriendService.list(loadFriends);
  function loadFriends(friends) {
    debugger;
    vm.friends = friends;
  }
}
module.exports = {
  controller: ['$scope', 'ffFriendService', ffFriendController],
  name: 'ffFriendController'
};


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-friend/ff.friend.controller.js
},{}],12:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
module.exports = ['$routeProvider', function($routeProvider) {
  $routeProvider.when('/friends', {
    controller: 'ffFriendController as vm',
    templateUrl: './modules/ff-friend/ff.friend.tmpl.html'
  });
}];


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-friend/ff.friend.routes.js
},{}],13:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffFriendService($http, $rootScope) {
  return {list: list};
  function list(fnSuccess, fnError) {
    return $http.get('/facebook/' + $rootScope.userInfo.id + '/friends').success(function(data, status, headers) {
      if (fnSuccess) {
        fnSuccess(data);
      }
    }).error(function(data, status, headers) {
      if (fnError) {
        fnError(data);
      }
      console.log('ffNewsService failed to get activities');
    });
  }
}
module.exports = {
  service: ['$http', '$rootScope', ffFriendService],
  name: 'ffFriendService'
};


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-friend/ff.friend.service.js
},{}],14:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
var newsFeed = require('./ff.news.feed.directive.js');
var newsPost = require('./ff.news.post.directive.js');
angular.module('ff.newsModule', ['ff.coreModule']).factory('ffNewsService', require('./ff.news.service.js')).directive(newsFeed.name, newsFeed.directive).controller(newsFeed.controllerName, newsFeed.controller).directive(newsPost.name, newsPost.directive).controller(newsPost.controllerName, newsPost.controller);


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-news/ff.news.app.js
},{"./ff.news.feed.directive.js":15,"./ff.news.post.directive.js":16,"./ff.news.service.js":17}],15:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffNewsFeed() {
  return {
    restrict: 'E',
    transclude: true,
    scope: true,
    templateUrl: './modules/ff-news/ff.news.feed.directive.tmpl.html',
    controller: 'ffNewsFeedController as vm',
    replace: true,
    link: function(scope, element, attrs) {}
  };
}
function ffNewsFeedController($scope, $rootScope, ffNewsService, $timeout, _) {
  var vm = this;
  var reloadNewsEvery = 10000;
  var plainNewsInfo;
  $scope.$on('authenticated', loadActivities);
  $scope.$on('contentUpdated', loadActivities);
  if ($rootScope.token) {
    loadActivities();
  }
  function loadActivities() {
    ffNewsService.activities(populateNews);
    autoUpdate();
  }
  function autoUpdate() {
    $timeout(function() {
      ffNewsService.activities(populateNews);
      autoUpdate();
    }, reloadNewsEvery);
  }
  function populateNews(result) {
    if (angular.toJson(vm.news) === angular.toJson(result.data))
      return;
    vm.news = result.data;
  }
}
module.exports = {
  directive: [ffNewsFeed],
  name: 'ffNewsFeed',
  controller: ['$scope', '$rootScope', 'ffNewsService', '$timeout', '_', ffNewsFeedController],
  controllerName: 'ffNewsFeedController'
};


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-news/ff.news.feed.directive.js
},{}],16:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffNewsPost() {
  return {
    restrict: 'E',
    transclude: true,
    templateUrl: './modules/ff-news/ff.news.post.directive.tmpl.html',
    controller: 'ffNewsPostController as vm',
    scope: true,
    replace: true,
    link: function(scope, element, attrs) {}
  };
}
function ffNewsPostController($scope, $rootScope, ffNewsService) {
  var vm = this;
  vm.test = 'This directive is bound.';
  vm.post = post;
  function post() {
    vm.waiting = true;
    ffNewsService.post(vm.message, updateContent, failedToPost);
  }
  function failedToPost() {
    vm.waiting = false;
  }
  function updateContent() {
    $rootScope.$broadcast('contentUpdated');
    vm.message = '';
    vm.waiting = false;
  }
}
module.exports = {
  directive: [ffNewsPost],
  name: 'ffNewsPost',
  controller: ['$scope', '$rootScope', 'ffNewsService', ffNewsPostController],
  controllerName: 'ffNewsPostController'
};


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-news/ff.news.post.directive.js
},{}],17:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffNewsService($http, $window, $rootScope) {
  return {
    post: post,
    activities: activities
  };
  function post(message, fnSuccess, fnError) {
    debugger;
    return $http.post('/facebook/me/feed?message=' + encodeURIComponent(message)).success(function(data, status, headers) {
      if (fnSuccess) {
        fnSuccess(data);
      }
    }).error(function(data, status, headers) {
      if (fnError) {
        fnError(data);
      }
      console.log('ffNewsService failed to post');
    });
  }
  function activities(fnSuccess, fnError) {
    return $http.get('/facebook/me/feed').success(function(data, status, headers) {
      if (fnSuccess) {
        fnSuccess(data);
      }
    }).error(function(data, status, headers) {
      if (fnError) {
        fnError(data);
      }
      console.log('ffNewsService failed to get news');
    });
  }
}
module.exports = ['$http', '$window', '$rootScope', ffNewsService];


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-news/ff.news.service.js
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
