(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
var ngModule = angular.module('FitFacebook', ['ngAnimate', 'ngRoute', 'ngMessages', 'ngCookies', 'ngSanitize', 'ngResource', 'underscore', 'ff.dashboardModule', 'ff.newsModule', 'ff.friendModule', 'ff.coreModule']);
require('./components/ng-underscore/ng-underscore.js');
require('./modules/ff-core/ff.core.app.js');
require('./modules/ff-friend/ff.friend.app.js');
require('./modules/ff-news/ff.news.app.js');
require('./modules/ff-dashboard/ff.dashboard.app.js');


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/app.js
},{"./components/ng-underscore/ng-underscore.js":2,"./modules/ff-core/ff.core.app.js":3,"./modules/ff-dashboard/ff.dashboard.app.js":6,"./modules/ff-friend/ff.friend.app.js":9,"./modules/ff-news/ff.news.app.js":13}],2:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
angular.module('underscore', []).factory('_', function() {
  return window._;
});


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/components/ng-underscore/ng-underscore.js
},{}],3:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
angular.module('ff.coreModule', []).controller('ffCoreController', require('./ff.core.controller.js')).constant('ffToken', '').config(require('./ff.core.config.js'));


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-core/ff.core.app.js
},{"./ff.core.config.js":4,"./ff.core.controller.js":5}],4:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
module.exports = ['$locationProvider', '$httpProvider', 'ffToken', config];
function config($locationProvider, $httpProvider, ffToken) {
  $locationProvider.html5Mode(true);
  $httpProvider.interceptors.push(['$rootScope', function($rootScope) {
    return {'request': function(config) {
        return addToken(config);
      }};
    function addToken(config) {
      if (shouldNotAddToken(config))
        return config;
      if (config.url.indexOf('facebook') > 0) {
        return formatFacebookUrl(config);
      }
      return config;
    }
    function formatFacebookUrl(config) {
      config.url = 'https:/graph.facebook.com/v2.4/me?access_token=' + $rootScope.token + '&' + config.url.replace('/facebook/', '') + '&debug=all&format=json&method=get&pretty=0&suppress_http_code=1';
      return config;
    }
    function shouldNotAddToken(config) {
      return (!$rootScope.token || config.url.indexOf('.html') > 0);
    }
  }]);
}


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-core/ff.core.config.js
},{}],5:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
module.exports = ['$scope', '$location', 'ffToken', '$window', '$rootScope', '$http', ffCoreController];
function ffCoreController($scope, $location, ffToken, $window, $rootScope, $http) {
  var vm = this;
  var code;
  loadToken();
  clearUrl();
  function loadToken() {
    if (!$window.location.search)
      return;
    code = getParameterByName('code');
    $http.get('/authorize/?code=' + code).success(getToken).error(failToGetToken);
  }
  function getToken(data) {
    vm.token = $rootScope.token = data.access_token;
  }
  function failToGetToken(error) {
    vm.errorMessage = error;
  }
  function clearUrl() {
    history.pushState("", document.title, $window.location.pathname);
  }
  function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec($window.location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
  }
}


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-core/ff.core.controller.js
},{}],6:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
angular.module('ff.dashboardModule', []).config(require('./ff.dashboard.routes.js')).controller('ffDashboardController', require('./ff.dashboard.controller.js'));


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-dashboard/ff.dashboard.app.js
},{"./ff.dashboard.controller.js":7,"./ff.dashboard.routes.js":8}],7:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
module.exports = ['$scope', ffDashboardController];
function ffDashboardController($scope) {
  var vm = this;
}


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-dashboard/ff.dashboard.controller.js
},{}],8:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
module.exports = ['$routeProvider', function($routeProvider) {
  $routeProvider.when('/', {
    controller: 'ffDashboardController as vm',
    templateUrl: './modules/ff-dashboard/ff.dashboard.tmpl.html'
  });
}];


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-dashboard/ff.dashboard.routes.js
},{}],9:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
var friendController = require('./ff.friend.controller.js');
var friendService = require('./ff.friend.service.js');
angular.module('ff.friendModule', []).config(require('./ff.friend.routes.js')).factory(friendService.name, friendService.service).controller(friendController.name, friendController.controller);


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-friend/ff.friend.app.js
},{"./ff.friend.controller.js":10,"./ff.friend.routes.js":11,"./ff.friend.service.js":12}],10:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
module.exports = {
  controller: ['$scope', 'ffFriendService', ffFriendController],
  name: 'ffFriendController'
};
function ffFriendController($scope, ffFriendService) {
  var vm = this;
}


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-friend/ff.friend.controller.js
},{}],11:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
module.exports = ['$routeProvider', function($routeProvider) {
  $routeProvider.when('/friends', {
    controller: 'ffFriendController as vm',
    templateUrl: './modules/ff-friend/ff.friend.tmpl.html'
  });
}];


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-friend/ff.friend.routes.js
},{}],12:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffFriendService($http) {
  return {list: list};
  function list(fnSuccess, fnError) {
    return $http.get('/facebook/friends').success(function(data, status, headers) {
      if (fnSuccess) {
        fnSuccess(data);
      }
    }).error(function(data, status, headers) {
      if (fnError) {
        fnError(data);
      }
      console.log('ffNewsService failed to get activities');
    });
  }
}
module.exports = {
  service: ['$http', ffFriendService],
  name: 'ffFriendService'
};


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-friend/ff.friend.service.js
},{}],13:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
var newsFeed = require('./ff.news.feed.directive.js');
angular.module('ff.newsModule', []).factory('ffNewsService', require('./ff.news.service.js')).directive(newsFeed.name, newsFeed.directive).controller(newsFeed.controllerName, newsFeed.controller);


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-news/ff.news.app.js
},{"./ff.news.feed.directive.js":14,"./ff.news.service.js":15}],14:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffNewsFeed() {
  return {
    restrict: 'E',
    transclude: true,
    templateUrl: './modules/ff-news/ff.news.feed.directive.tmpl.html',
    controller: 'ffNewsFeedController as vm',
    replace: true,
    link: function(scope, element, attrs) {}
  };
}
function ffNewsFeedController($scope, $rootScope, ffNewsService) {
  var vm = this;
  $scope.$on('authenticated', loadActivities);
  if ($rootScope.token) {
    loadActivities();
  }
  function loadActivities() {
    ffNewsService.activities(populateNews);
  }
  function populateNews(result) {
    debugger;
    vm.news = result.posts.data;
  }
}
module.exports = {
  directive: [ffNewsFeed],
  name: 'ffNewsFeed',
  controller: ['$scope', '$rootScope', 'ffNewsService', ffNewsFeedController],
  controllerName: 'ffNewsFeedController'
};


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-news/ff.news.feed.directive.js
},{}],15:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffNewsService($http, $window, ffToken) {
  return {
    post: post,
    activities: activities
  };
  function post(fnSuccess, fnError) {
    return $http.get('/api/activities').success(function(data, status, headers) {
      if (fnSuccess) {
        fnSuccess(data);
      }
    }).error(function(data, status, headers) {
      if (fnError) {
        fnError(data);
      }
      console.log('ffNewsService failed to post');
    });
  }
  function activities(fnSuccess, fnError) {
    return $http.get('/facebook/fields=posts.limit(15)').success(function(data, status, headers) {
      if (fnSuccess) {
        fnSuccess(data);
      }
    }).error(function(data, status, headers) {
      if (fnError) {
        fnError(data);
      }
      console.log('ffNewsService failed to get activities');
    });
  }
}
module.exports = ['$http', '$window', ffNewsService];


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-news/ff.news.service.js
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi9hcHAuanMiLCIuLi9jb21wb25lbnRzL25nLXVuZGVyc2NvcmUvbmctdW5kZXJzY29yZS5qcyIsIi4uL21vZHVsZXMvZmYtY29yZS9mZi5jb3JlLmFwcC5qcyIsIi4uL21vZHVsZXMvZmYtY29yZS9mZi5jb3JlLmNvbmZpZy5qcyIsIi4uL21vZHVsZXMvZmYtY29yZS9mZi5jb3JlLmNvbnRyb2xsZXIuanMiLCIuLi9tb2R1bGVzL2ZmLWRhc2hib2FyZC9mZi5kYXNoYm9hcmQuYXBwLmpzIiwiLi4vbW9kdWxlcy9mZi1kYXNoYm9hcmQvZmYuZGFzaGJvYXJkLmNvbnRyb2xsZXIuanMiLCIuLi9tb2R1bGVzL2ZmLWRhc2hib2FyZC9mZi5kYXNoYm9hcmQucm91dGVzLmpzIiwiLi4vbW9kdWxlcy9mZi1mcmllbmQvZmYuZnJpZW5kLmFwcC5qcyIsIi4uL21vZHVsZXMvZmYtZnJpZW5kL2ZmLmZyaWVuZC5jb250cm9sbGVyLmpzIiwiLi4vbW9kdWxlcy9mZi1mcmllbmQvZmYuZnJpZW5kLnJvdXRlcy5qcyIsIi4uL21vZHVsZXMvZmYtZnJpZW5kL2ZmLmZyaWVuZC5zZXJ2aWNlLmpzIiwiLi4vbW9kdWxlcy9mZi1uZXdzL2ZmLm5ld3MuYXBwLmpzIiwiLi4vbW9kdWxlcy9mZi1uZXdzL2ZmLm5ld3MuZmVlZC5kaXJlY3RpdmUuanMiLCIuLi9tb2R1bGVzL2ZmLW5ld3MvZmYubmV3cy5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFBQSxXQUFXLENBQUM7QUFDWixXQUFXLENBQUM7QUFDWixBQUFJLEVBQUEsQ0FBQSxRQUFPLEVBQUksQ0FBQSxPQUFNLE9BQU8sQUFBQyxDQUFDLGFBQVksQ0FBRyxFQUFDLFdBQVUsQ0FBRyxVQUFRLENBQUcsYUFBVyxDQUFHLFlBQVUsQ0FBRyxhQUFXLENB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QUFHLENBQUcsQ0FBQSxNQUFLLENBQUcsQ0FBQSxPQUFNLENBQUc7QUFDdkMsU0FBSSxPQUFNLENBQUc7QUFDWCxjQUFNLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztNQUNmO0FBQUEsQUFDQSxZQUFNLElBQUksQUFBQyxDQUFDLHdDQUF1QyxDQUFDLENBQUM7SUFDdkQsQ0FBQyxDQUFDO0VBQ0o7QUFBQSxBQUNGO0FBQUEsQUFDQSxLQUFLLFFBQVEsRUFBSSxFQUFDLE9BQU0sQ0FBRyxVQUFRLENBQUcsY0FBWSxDQUFDLENBQUM7QUFHbUQiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBuZ01vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdGaXRGYWNlYm9vaycsIFsnbmdBbmltYXRlJywgJ25nUm91dGUnLCAnbmdNZXNzYWdlcycsICduZ0Nvb2tpZXMnLCAnbmdTYW5pdGl6ZScsICduZ1Jlc291cmNlJywgJ3VuZGVyc2NvcmUnLCAnZmYuZGFzaGJvYXJkTW9kdWxlJywgJ2ZmLm5ld3NNb2R1bGUnLCAnZmYuZnJpZW5kTW9kdWxlJywgJ2ZmLmNvcmVNb2R1bGUnXSk7XG5yZXF1aXJlKCcuL2NvbXBvbmVudHMvbmctdW5kZXJzY29yZS9uZy11bmRlcnNjb3JlLmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZmYtY29yZS9mZi5jb3JlLmFwcC5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2ZmLWZyaWVuZC9mZi5mcmllbmQuYXBwLmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZmYtbmV3cy9mZi5uZXdzLmFwcC5qcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2ZmLWRhc2hib2FyZC9mZi5kYXNoYm9hcmQuYXBwLmpzJyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OWhjSEF1YW5NaUxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXlZV1poWld4bVpYSnVZVzVrWlhNdlVISnZhbVZqZEhNdlptbDBMV1poWTJWaWIyOXJMM2QzZHk5d2RXSnNhV012WVhCd0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlFVRXNWMEZCVnl4RFFVRkRPMEZCUTFvc1FVRkJTU3hGUVVGQkxFTkJRVUVzVVVGQlR5eEZRVUZKTEVOQlFVRXNUMEZCVFN4UFFVRlBMRUZCUVVNc1EwRkJReXhoUVVGWkxFTkJRVWNzUlVGQlF5eFhRVUZWTEVOQlFVY3NWVUZCVVN4RFFVRkhMR0ZCUVZjc1EwRkJSeXhaUVVGVkxFTkJRVWNzWVVGQlZ5eERRVUZITEdGQlFWY3NRMEZCUnl4aFFVRlhMRU5CUVVjc2NVSkJRVzFDTEVOQlFVY3NaMEpCUVdNc1EwRkJSeXhyUWtGQlowSXNRMEZCUnl4blFrRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU4wVGl4TlFVRk5MRUZCUVVNc1EwRkJReXcyUTBGQk5FTXNRMEZCUXl4RFFVRkRPMEZCUTNSRUxFMUJRVTBzUVVGQlF5eERRVUZETEd0RFFVRnBReXhEUVVGRExFTkJRVU03UVVGRE0wTXNUVUZCVFN4QlFVRkRMRU5CUVVNc2MwTkJRWEZETEVOQlFVTXNRMEZCUXp0QlFVTXZReXhOUVVGTkxFRkJRVU1zUTBGQlF5eHJRMEZCYVVNc1EwRkJReXhEUVVGRE8wRkJRek5ETEUxQlFVMHNRVUZCUXl4RFFVRkRMRFJEUVVFeVF5eERRVUZETEVOQlFVTTdRVUZIYzBJaUxDSnpiM1Z5WTJWU2IyOTBJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk4aUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmNJblZ6WlNCemRISnBZM1JjSWp0Y2JuWmhjaUJ1WjAxdlpIVnNaU0E5SUdGdVozVnNZWEl1Ylc5a2RXeGxLQ2RHYVhSR1lXTmxZbTl2YXljc0lGc25ibWRCYm1sdFlYUmxKeXdnSjI1blVtOTFkR1VuTENBbmJtZE5aWE56WVdkbGN5Y3NJQ2R1WjBOdmIydHBaWE1uTENBbmJtZFRZVzVwZEdsNlpTY3NJQ2R1WjFKbGMyOTFjbU5sSnl3Z0ozVnVaR1Z5YzJOdmNtVW5MQ0FuWm1ZdVpHRnphR0p2WVhKa1RXOWtkV3hsSnl3Z0oyWm1MbTVsZDNOTmIyUjFiR1VuTENBblptWXVabkpwWlc1a1RXOWtkV3hsSnl3Z0oyWm1MbU52Y21WTmIyUjFiR1VuWFNrN1hHNXlaWEYxYVhKbEtDY3VMMk52YlhCdmJtVnVkSE12Ym1jdGRXNWtaWEp6WTI5eVpTOXVaeTExYm1SbGNuTmpiM0psTG1wekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12Wm1ZdFkyOXlaUzltWmk1amIzSmxMbUZ3Y0M1cWN5Y3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJabUxXWnlhV1Z1WkM5bVppNW1jbWxsYm1RdVlYQndMbXB6SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZabVl0Ym1WM2N5OW1aaTV1WlhkekxtRndjQzVxY3ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlptTFdSaGMyaGliMkZ5WkM5bVppNWtZWE5vWW05aGNtUXVZWEJ3TG1wekp5azdYRzVjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXUmhkR0U2WVhCd2JHbGpZWFJwYjI0dmFuTnZianRpWVhObE5qUXNaWGxLTWxwWVNucGhWemwxU1dwdmVreERTbTFoVjNoc1NXcHZhVXd4Vm5wYVdFcDZURE5LYUZwdFJteGlSMXBzWTIwMWFHSnRVbXhqZVRsUlkyMDVjVnBYVGpCamVUbHRZVmhSZEZwdFJtcGFWMHAyWWpKemRtUXpaRE5NTTBJeFdXMTRjRmw1T1doalNFRjFZVzVOYVV4RFNucGlNMVo1V1RKV2VrbHFjR0pKYVRsV1l6SldlV041T1hsWlYxcG9XbGQ0YlZwWVNuVlpWelZyV2xoTmRsVklTblpoYlZacVpFaE5kbHB0YkRCTVYxcG9XVEpXYVdJeU9YSk1NMlF6WkhrNWQyUlhTbk5oVjAxMldWaENkMHh0Y0hwSmJEQnpTVzAxYUdKWFZucEphbkJpV0ZOM2FXSlhSbmRqUjJ4MVdqTk5hVTlwU2tKUlZYUkNUekJHUWxGVlJYTlJWVVpDVTFONFJsRlZSa0pNUlU1Q1VWVkZjMVZWUmtKVWVYaEdVVlZHU2t4RlRrSlJWVVZ6VkRCR1FsUlRlRkJSVlVaUVRFVkdRbEZWVFhOUk1FWkNVWGw0YUZGVlJscE1SVTVDVVZWamMxSlZSa1JsYTAxelZqQkdRbFpUZUVSUlZVWklURVpXUWxGV1JYTlJNRVpDVW5sNGFGRlZSbGhNUlU1Q1VUSTFSRXhHYkVKUlZsVnpVVEJHUWxKNWVHaFJWVVpZVEVWT1FsRXphRU5NUjBaQ1VWWmpjMUV3UmtKU2VYaG9VVlZHV0V4RlRrSlNWRVpEVEVoR1ExRlZSblJSYVhoRVVWVk9kVkZwZUc1UmEwWkNXWGw0UkZGVlRtdE1SM1JEVVZWR2JsRnBlRVJSVlU1dlVXbDRibEZyUmtKWmVYaEVVVlZPY1ZGcGVFUlJWVVpFVEVWT1FsRlZSVGRSVlVaSVVrTjRUbEZWUms1TVJVWkNVVlZOYzFFd1JrSlJlWGN5VVRCR1FrNUZUWE5STUVaQ1VYbDRSRkZWUmtSUE1FWkNWRmhTUlV4Rk1VSlJWVEJ6VVZWR1FsRjVlRVJSVlVaRVRFZDBSRkZWUm5CUmVYaEVVVlZHUkV4RlRrSlJWVTAzVVZWR1JFMHdUWE5VVlVaQ1ZGTjRRbEZWUmtSTVJVNUNVVlZOYzJNd1RrSlJXRVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBRbEZWVFhaUmVYaE9VVlZHVGt4RlJrSlJWVTF6VVRCR1FsRjVlSEpSTUVaQ1lWVk5jMUV3UmtKUmVYaEVVVlZHUkU4d1JrSlJlazVFVEVVeFFsRlZNSE5SVlVaQ1VYbDRSRkZWUmtSTVJGSkVVVlZGZVZGNWVFUlJWVVpFVEVWT1FsRlZUVGRSVlVaRVkydFJhVXhEU25waU0xWjVXVEpXVTJJeU9UQkphbTlwVERGV2VscFlTbnBNTTBwb1dtMUdiR0pIV214amJUVm9ZbTFTYkdONU9WRmpiVGx4V2xkT01HTjVPVzFoV0ZGMFdtMUdhbHBYU25aaU1uTjJaRE5rTTB3elFqRlpiWGh3V1hrNGFVeERTbnBpTTFaNVdUSldlbEV5T1hWa1IxWjFaRU5KTmxkNVNYWkxhWEJqWW1sQmNVbEZNV2hoVnpSbllsYzVhMlJYZUd4TVEwSjZZVWM1TVdKSFVXZFpiVlZuWkZoT2JGcERRbkJpYVVJd1lVZFZaMkp0WTNSWldFSjNUR3g0ZFVsRGIyZFJSelZ1V2tjNWFrbEhNWFphU0ZaeldsWjRkVWxEYjJkUlJ6Vm9ZbGRWWjFKdGJEQlNiVVpxV2xkS2RtSXljMmRZUnpSblMyazVZMkp1V21oamFVSjFXakF4ZGxwSVZuTmFVMEU1U1VkR2RWb3pWbk5aV0VsMVlsYzVhMlJYZUd4TFEyUkhZVmhTUjFsWFRteFpiVGwyWVhsamMwbEdkR05pYVVGblNVTkJibUp0WkVKaWJXeDBXVmhTYkVwNWQyZEtNalZ1VlcwNU1XUkhWVzVNUTBGdVltMWtUbHBZVG5wWlYyUnNZM2xqYzFoSE5HZEpRMEZuU2pJMWJsRXlPWFpoTW14c1kzbGpjMGxEWkhWYU1VNW9ZbTFzTUdGWWNHeEtlWGRuV0VjMFowbERRV2RLTWpWdVZXMVdlbUl6Vm5sWk1sVnVURU5CYm1SWE5XdGFXRXA2V1RJNWVWcFRZM05ZUnpSblNVTkJaMWhITkdkSlEwRnVXbTFaZFZwSFJucGhSMHAyV1ZoS2ExUlhPV3RrVjNoc1NubDRZMkpwUVdkSlEyUnRXbWsxZFZwWVpIcFVWemxyWkZkNGJFcDVlR05pYVVGblNVTmtiVnBwTlcxamJXeHNZbTFTVG1JeVVqRmlSMVZ1VEVaNGRVbERRV2RLTWxwdFRHMU9kbU50Vms1aU1sSXhZa2RWYmxoSE5XUkxWbmgxV0VjMVkySnVTbXhqV0Zad1kyMVZiMHA1TkhaWk1qbDBZMGM1ZFZwWE5UQmplVGwxV25reE1XSnRVbXhqYms1cVlqTktiRXd5Tlc1TVdGWjFXa2RXZVdNeVRuWmpiVlYxWVc1TmJrdFVkR05pYVRoeFMyeDRkVWxEYjJkVFZUVkxVbFZPVlVsSVVtOWFVMEowWWpKU01XSkhWV2RoVnpSblpFZG9iRWxGV25Ca1JWcG9XVEpXYVdJeU9YSkpSVEYyV2toV2MxcFRkMmRSVmsxblUxWlJaMU5XVFdkUlZVcFFWbXRWZFZoSE5HZExhVUpOVkRCR1JVbElVbTlhVTBKMFlqSlNNV0pIVlhOSlJrNVFTVVZzVlVsRmJGUkpSVXBHVkVWNFVGWjVOV05pYVVGeFRERjRkVmhITlhsYVdFWXhZVmhLYkV0RFkzVk1NakYyV2toV2MxcFlUWFphYlZsMFdUSTVlVnBUT1cxYWFUVnFZak5LYkV4dFJuZGpRelZ4WTNsamNFOHhlSFZqYlZaNFpGZHNlVnBUWjI1TWFUbDBZakpTTVdKSFZucE1NbHB0VEZkYWVXRlhWblZhUXpsdFdtazFiV050Ykd4aWJWRjFXVmhDZDB4dGNIcEtlV3MzV0VjMWVWcFlSakZoV0Vwc1MwTmpkVXd5TVhaYVNGWnpXbGhOZGxwdFdYUmliVll6WTNrNWJWcHBOWFZhV0dSNlRHMUdkMk5ETlhGamVXTndUekY0ZFdOdFZuaGtWMng1V2xObmJreHBPWFJpTWxJeFlrZFdla3d5V20xTVYxSm9ZekpvYVdJeVJubGFRemx0V21rMWExbFlUbTlaYlRsb1kyMVJkVmxZUW5kTWJYQjZTbmxyTjFoSE5HbFlXREE5WEc0dkx5TWdjMjkxY21ObFZWSk1QUzlWYzJWeWN5OXlZV1poWld4bVpYSnVZVzVrWlhNdlVISnZhbVZqZEhNdlptbDBMV1poWTJWaWIyOXJMM2QzZHk5d2RXSnNhV012WVhCd0xtcHpJbDE5XG4vLyMgc291cmNlVVJMPS9Vc2Vycy9yYWZhZWxmZXJuYW5kZXMvUHJvamVjdHMvZml0LWZhY2Vib29rL3d3dy9wdWJsaWMvYXBwLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBzdHJpY3RcIjtcbmFuZ3VsYXIubW9kdWxlKCd1bmRlcnNjb3JlJywgW10pLmZhY3RvcnkoJ18nLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHdpbmRvdy5fO1xufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OWpiMjF3YjI1bGJuUnpMMjVuTFhWdVpHVnljMk52Y21VdmJtY3RkVzVrWlhKelkyOXlaUzVxY3lJc0luTnZkWEpqWlhNaU9sc2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTlqYjIxd2IyNWxiblJ6TDI1bkxYVnVaR1Z5YzJOdmNtVXZibWN0ZFc1a1pYSnpZMjl5WlM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVGQkxGZEJRVmNzUTBGQlF6dEJRVU5hTEUxQlFVMHNUMEZCVHl4QlFVRkRMRU5CUVVNc1dVRkJWeXhEUVVGSExFZEJRVU1zUTBGQlF5eFJRVUZSTEVGQlFVTXNRMEZCUXl4SFFVRkZMRU5CUVVjc1ZVRkJVU3hCUVVGRExFTkJRVVU3UVVGRGRrUXNUMEZCVHl4RFFVRkJMRTFCUVVzc1JVRkJSU3hEUVVGRE8wRkJRMnBDTEVOQlFVTXNRMEZCUXp0QlFVYzBSeUlzSW5OdmRYSmpaVkp2YjNRaU9pSXZWWE5sY25NdmNtRm1ZV1ZzWm1WeWJtRnVaR1Z6TDFCeWIycGxZM1J6TDJacGRDMW1ZV05sWW05dmF5OTNkM2N2Y0hWaWJHbGpMMk52YlhCdmJtVnVkSE12Ym1jdGRXNWtaWEp6WTI5eVpTOGlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpjSW5WelpTQnpkSEpwWTNSY0lqdGNibUZ1WjNWc1lYSXViVzlrZFd4bEtDZDFibVJsY25OamIzSmxKeXdnVzEwcExtWmhZM1J2Y25rb0oxOG5MQ0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdjbVYwZFhKdUlIZHBibVJ2ZHk1Zk8xeHVmU2s3WEc1Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1JoZEdFNllYQndiR2xqWVhScGIyNHZhbk52Ymp0aVlYTmxOalFzWlhsS01scFlTbnBoVnpsMVNXcHZla3hEU20xaFYzaHNTV3B2YVV3eFZucGFXRXA2VEROS2FGcHRSbXhpUjFwc1kyMDFhR0p0VW14amVUbFJZMjA1Y1ZwWFRqQmplVGx0WVZoUmRGcHRSbXBhVjBwMllqSnpkbVF6WkROTU0wSXhXVzE0Y0ZsNU9XcGlNakYzWWpJMWJHSnVVbnBNTWpWdVRGaFdkVnBIVm5sak1rNTJZMjFWZG1KdFkzUmtWelZyV2xoS2Vsa3lPWGxhVXpWeFkzbEpjMGx1VG5aa1dFcHFXbGhOYVU5c2MybE1NVlo2V2xoS2Vrd3pTbWhhYlVac1lrZGFiR050TldoaWJWSnNZM2s1VVdOdE9YRmFWMDR3WTNrNWJXRllVWFJhYlVacVdsZEtkbUl5YzNaa00yUXpURE5DTVZsdGVIQlplVGxxWWpJeGQySXlOV3hpYmxKNlRESTFia3hZVm5WYVIxWjVZekpPZG1OdFZYWmliV04wWkZjMWExcFlTbnBaTWpsNVdsTTFjV041U21STVEwcDFXVmN4YkdONVNUWlhNVEJ6U1cweGFHTklRbkJpYldSNlNXcHZhVkZWUmtKUlZIUkNVVlZHUWt4Rk1VSlJWVEJ6VkRCR1FsUjVlRUpSVlVaRVRFVk9RbEZWVFhOWFZVWkNWbmw0UkZGVlJraE1SV1JDVVZWTmMxRXdSa0pSZVhoU1VWVk9kMUZwZUVKUlZVWkVURVZPUWxGVlRYTlNNRVpDVWxONFJGRlZSa2hNUmxaQ1VWWkZjMUZWUmtKUmVYaEVVVlZHUms4d1JrSlJNMHBEVEVVNVFsRlZPSE5STUVaQ1VWTjRUbEZWUmt4TVJWWkNVVlZWYzFFd1JrSlJlblJDVVZWT2RWRnBlRVJSVlVaRVRFVk9RbEZWVFRkUlZVWkVWR2xKYzBsdVRuWmtXRXBxV2xaS2RtSXpVV2xQYVVsMlZsaE9iR051VFhaamJVWnRXVmRXYzFwdFZubGliVVoxV2tkV2Vrd3hRbmxpTW5Cc1dUTlNla3d5V25Ca1F6RnRXVmRPYkZsdE9YWmhlVGt6WkROamRtTklWbWxpUjJ4cVRESk9kbUpZUW5aaWJWWjFaRWhOZG1KdFkzUmtWelZyV2xoS2Vsa3lPWGxhVXpocFRFTktlbUl6Vm5sWk1sWjZVVEk1ZFdSSFZuVmtRMGsyVjNsS2FHSnRaREZpUjBaNVRHMHhkbHBJVm5OYVUyZHVaRmMxYTFwWVNucFpNamw1V2xOamMwbEdkR1JMVm5oMVNVTkJaMGxETlcxWlYwNHdZak5LTlV0RFpHWktlWGRuV201V2RWa3pVbkJpTWpSdlMxTkNOMWhITkdkSlEwRm5TVU5CWjBsSVNteGtTRlo1WW1sQ00yRlhOV3RpTTJOMVdIcHpaMHg1T0dkWldFNTZaRmN4YkdONVFqRmliVkpzWTI1T2FtSXpTbXhKUjJob1kzbENhR0pJU214WlYxSTFTVWRLYkZwWE5HZGlSemxvV2tkV2EwbEhPWFZKU0ZKdldsTkNkMWxYWkd4WVJ6Um5TVU5CWjJaVGF6ZFlSelJwV0Znd1BWeHVMeThqSUhOdmRYSmpaVlZTVEQwdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyTnZiWEJ2Ym1WdWRITXZibWN0ZFc1a1pYSnpZMjl5WlM5dVp5MTFibVJsY25OamIzSmxMbXB6SWwxOVxuLy8jIHNvdXJjZVVSTD0vVXNlcnMvcmFmYWVsZmVybmFuZGVzL1Byb2plY3RzL2ZpdC1mYWNlYm9vay93d3cvcHVibGljL2NvbXBvbmVudHMvbmctdW5kZXJzY29yZS9uZy11bmRlcnNjb3JlLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBzdHJpY3RcIjtcbmFuZ3VsYXIubW9kdWxlKCdmZi5jb3JlTW9kdWxlJywgW10pLmNvbnRyb2xsZXIoJ2ZmQ29yZUNvbnRyb2xsZXInLCByZXF1aXJlKCcuL2ZmLmNvcmUuY29udHJvbGxlci5qcycpKS5jb25zdGFudCgnZmZUb2tlbicsICcnKS5jb25maWcocmVxdWlyZSgnLi9mZi5jb3JlLmNvbmZpZy5qcycpKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXTnZjbVV2Wm1ZdVkyOXlaUzVoY0hBdWFuTWlMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl5WVdaaFpXeG1aWEp1WVc1a1pYTXZVSEp2YW1WamRITXZabWwwTFdaaFkyVmliMjlyTDNkM2R5OXdkV0pzYVdNdmJXOWtkV3hsY3k5bVppMWpiM0psTDJabUxtTnZjbVV1WVhCd0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlFVRXNWMEZCVnl4RFFVRkRPMEZCUTFvc1RVRkJUU3hQUVVGUExFRkJRVU1zUTBGQlF5eGxRVUZqTEVOQlFVY3NSMEZCUXl4RFFVRkRMRmRCUVZjc1FVRkJReXhEUVVGRExHdENRVUZwUWl4RFFVRkhMRU5CUVVFc1QwRkJUU3hCUVVGRExFTkJRVU1zZVVKQlFYZENMRU5CUVVNc1EwRkJReXhUUVVGVExFRkJRVU1zUTBGQlF5eFRRVUZSTEVOQlFVY3NSMEZCUXl4RFFVRkRMRTlCUVU4c1FVRkJReXhEUVVGRExFOUJRVTBzUVVGQlF5eERRVUZETEhGQ1FVRnZRaXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVWRzUlNJc0luTnZkWEpqWlZKdmIzUWlPaUl2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDIxdlpIVnNaWE12Wm1ZdFkyOXlaUzhpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKY0luVnpaU0J6ZEhKcFkzUmNJanRjYm1GdVozVnNZWEl1Ylc5a2RXeGxLQ2RtWmk1amIzSmxUVzlrZFd4bEp5d2dXMTBwTG1OdmJuUnliMnhzWlhJb0oyWm1RMjl5WlVOdmJuUnliMnhzWlhJbkxDQnlaWEYxYVhKbEtDY3VMMlptTG1OdmNtVXVZMjl1ZEhKdmJHeGxjaTVxY3ljcEtTNWpiMjV6ZEdGdWRDZ25abVpVYjJ0bGJpY3NJQ2NuS1M1amIyNW1hV2NvY21WeGRXbHlaU2duTGk5bVppNWpiM0psTG1OdmJtWnBaeTVxY3ljcEtUdGNibHh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVpHRjBZVHBoY0hCc2FXTmhkR2x2Ymk5cWMyOXVPMkpoYzJVMk5DeGxlVW95V2xoS2VtRlhPWFZKYW05NlRFTktiV0ZYZUd4SmFtOXBUREZXZWxwWVNucE1NMHBvV20xR2JHSkhXbXhqYlRWb1ltMVNiR041T1ZGamJUbHhXbGRPTUdONU9XMWhXRkYwV20xR2FscFhTblppTW5OMlpETmtNMHd6UWpGWmJYaHdXWGs1ZEdJeVVqRmlSMVo2VERKYWJVeFhUblpqYlZWMldtMVpkVmt5T1hsYVV6Vm9ZMGhCZFdGdVRXbE1RMHA2WWpOV2VWa3lWbnBKYW5CaVNXazVWbU15Vm5samVUbDVXVmRhYUZwWGVHMWFXRXAxV1ZjMWExcFlUWFpWU0VwMllXMVdhbVJJVFhaYWJXd3dURmRhYUZreVZtbGlNamx5VEROa00yUjVPWGRrVjBwellWZE5kbUpYT1d0a1YzaHNZM2s1YlZwcE1XcGlNMHBzVERKYWJVeHRUblpqYlZWMVdWaENkMHh0Y0hwSmJEQnpTVzAxYUdKWFZucEphbkJpV0ZOM2FXSlhSbmRqUjJ4MVdqTk5hVTlwU2tKUlZrNUNUekJHUWxGVlJYTlVWVVpDVkZONFVGRlZSbEJNUlVaQ1VWVk5jMUV3UmtKUmVYaHNVVlZHYWt4RlRrSlJWV056VWpCR1FsRjVlRVJSVlVaRVRFWmtRbEV6UWtOTVJVWkNVVlZOYzFFd1JrSlJlWGh5VVd0R1FtRlZTWE5STUVaQ1VubDRSRkZWUmtKTVJUbENVVlV3YzFGVlJrSlJlWGhFVVZWR1JFeEliRU5SVlVZelVXbDRSRkZWUmtSTVJVNUNVVlZOYzFVd1JrUk5WVkZ6VVZWR1FsRjVlRVJSVlVaRVRFWk9RbEZXUlhOUk1FWkNVbE40U0ZGVlJrUk1SVTVDVVZWTmMxUXdSa1JoUlVselVWVkdRbEY1ZUVSUlZVWkVURVU1UWxGVk1ITlJWVVpDVVhsNFJGRlZSa1JNU0VaRFVWVkdkbEZwZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFFsRldZM3BSZVVselNXNU9kbVJZU21wYVZrcDJZak5SYVU5cFNYWldXRTVzWTI1TmRtTnRSbTFaVjFaeldtMVdlV0p0Um5WYVIxWjZUREZDZVdJeWNHeFpNMUo2VERKYWNHUkRNVzFaVjA1c1dXMDVkbUY1T1ROa00yTjJZMGhXYVdKSGJHcE1NakYyV2toV2MxcFlUWFphYlZsMFdUSTVlVnBUT0dsTVEwcDZZak5XZVZreVZucFJNamwxWkVkV2RXUkRTVFpYZVVwalltazRjVXRzZUhWSlEyOW5WVzFXZDJOdFZucGFWelV3WTNsQ01HRkhWV2RaTWpsNVdsTkNkR0l5VWpGaVIxVm5ZMjFXZW1OSE9YVmpNbXhwWWtkV1kySnBRWEZKUjFwMlkybENNR0ZIVldka01qbDVZVEphYzJJelkyZGlNbHB0U1VoU2IxcFRRbWhqU0VGMVdFYzBaMHRzZUhWSlEyOW5VVWMxYmxwSE9XcEpSekYyV2toV2MxcFdlSFZKUTI5blVVYzFhR0pYVldkYWJWbDFXVEk1ZVZwVk1YWmFTRlp6V2xOQ1kySnBRWEZKUlVKNldsZFZaMXB0V2tSaU0wcHNVVEk1ZFdSSVNuWmlSM2hzWTJ4NGRVbERiM1pZUnpWb1ltMWtNV0pIUm5sTWJURjJXa2hXYzFwVFoyNWFiVmwxV1RJNWVWcFZNWFphU0ZaeldsTmpjMGxHZEdSTFZuaDFTVU5CWjBsRE5XcGlNalV3WTIwNWMySkhWbmxMUTJSdFdtdE9kbU50VmtSaU1qVXdZMjA1YzJKSFZubEtlWGRuWTIxV2VHUlhiSGxhVTJkdVRHazViVnBwTldwaU0wcHNURzFPZG1KdVVubGlNbmh6V2xoSmRXRnVUVzVMVTJ4alltbEJaMGxEUVhWWk1qbDFZek5TYUdKdVVXOUtNbHB0VmtjNWNscFhORzVNUTJOdVMxWjRkVWxEUVdkSlF6VnFZakkxYldGWFkyOWpiVlo0WkZkc2VWcFRaMjVNYVRsdFdtazFhbUl6U214TWJVNTJZbTFhY0ZwNU5YRmplV053UzFSMFkySnNlSFZNZVRoMVdUSTVkV016VW1oaWJsRnZTakphYlZaSE9YSmFWelJ1VEVoS2JHTllWbkJqYlZWdlNuazBkVXg1TkhWTU1scG9XVEpXYVdJeU9YSk1XRkoyWVRKV2RVeHRjSHBLZVd0d1dFYzBka3g1UVhWWk1qbDFZek5TYUdKdVVXOUtNbHB0VmtjNWNscFhORzVNUTBKdVdsaFNVVmxZU21oaVYxWXdXbGhLUTJWVk5XaGlWMVZ2U2pKT2RscEhWVzVMVTJ4alltazRka2xIV2pGaWJVNHdZVmM1ZFVsSFpHeGtSa0pvWTIxR2RGcFlVbXhqYTBvMVZHMUdkRnBUYUhWWlZ6RnNTMU5DTjFoSE5IWk1lVUZuU1VOQ2RWbFhNV3hKUkRCblltMUdkRnBUTlhsYVdFSnpXVmRPYkV0RE9XSllSbmhpV0ZNNGMwbEdkMmxZUm5oaldFWjBZMGxwYTNWamJWWjNZa2RHYWxwVFozWlhNWGhqV0ZZd2RreERRbU5KYkhoaldFWjRaRmhEU1hCUE1YaDFUSGs0WjBsRFFXZGtiVVo1U1VoS2JGb3lWalJKUkRCblltMVdNMGxHU214YU1GWTBZME5vWTBsc2RHTllSbmhqVUhsYVpGaERTV2RMZVVKMVdWY3hiRWxEYzJkWVEwazVTMFowWlVwcFRtUkxhV3hqU1dscmMxaEhOSFpNZVVGblNVTkNlVnBZVGpGaVNGSjZTVVF3WjJOdFZtNWFXR2QxV2xob2JGbDVhRE5oVnpWcllqTmpkV0pIT1dwWldGSndZakkwZFdNeVZtaGpiVTV2UzFSMFkySnBPSFpKUTBGblNVaEtiR1JJVm5saWFVSjVXbGhPTVdKSVVucEpSREE1VUZOQ2RXUlhlSE5KUkRobldFTktZMGxwUVRaSlIxSnNXVEk1YTFwV1ZsTlRWVTUyWWxoQ2RtSnRWblZrUTJoNVdsaE9NV0pJVW5wWGVrWmtURzVLYkdOSGVHaFpNbFZ2VERGNFkwdDVPVzVNUTBKalNXbENZMGxwYTNCUE1YaDFUSGs0WjBsSU1XTmliSGgxU1d3eE9WeHVMeThqSUhOdmRYSmpaVlZTVEQwdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyMXZaSFZzWlhNdlptWXRZMjl5WlM5bVppNWpiM0psTG1Gd2NDNXFjeUpkZlE9PVxuLy8jIHNvdXJjZVVSTD0vVXNlcnMvcmFmYWVsZmVybmFuZGVzL1Byb2plY3RzL2ZpdC1mYWNlYm9vay93d3cvcHVibGljL21vZHVsZXMvZmYtY29yZS9mZi5jb3JlLmFwcC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFsnJGxvY2F0aW9uUHJvdmlkZXInLCAnJGh0dHBQcm92aWRlcicsICdmZlRva2VuJywgY29uZmlnXTtcbmZ1bmN0aW9uIGNvbmZpZygkbG9jYXRpb25Qcm92aWRlciwgJGh0dHBQcm92aWRlciwgZmZUb2tlbikge1xuICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG4gICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goWyckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHJvb3RTY29wZSkge1xuICAgIHJldHVybiB7J3JlcXVlc3QnOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIGFkZFRva2VuKGNvbmZpZyk7XG4gICAgICB9fTtcbiAgICBmdW5jdGlvbiBhZGRUb2tlbihjb25maWcpIHtcbiAgICAgIGlmIChzaG91bGROb3RBZGRUb2tlbihjb25maWcpKVxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgaWYgKGNvbmZpZy51cmwuaW5kZXhPZignZmFjZWJvb2snKSA+IDApIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdEZhY2Vib29rVXJsKGNvbmZpZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRGYWNlYm9va1VybChjb25maWcpIHtcbiAgICAgIGNvbmZpZy51cmwgPSAnaHR0cHM6L2dyYXBoLmZhY2Vib29rLmNvbS92Mi40L21lP2FjY2Vzc190b2tlbj0nICsgJHJvb3RTY29wZS50b2tlbiArICcmJyArIGNvbmZpZy51cmwucmVwbGFjZSgnL2ZhY2Vib29rLycsICcnKSArICcmZGVidWc9YWxsJmZvcm1hdD1qc29uJm1ldGhvZD1nZXQmcHJldHR5PTAmc3VwcHJlc3NfaHR0cF9jb2RlPTEnO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG4gICAgZnVuY3Rpb24gc2hvdWxkTm90QWRkVG9rZW4oY29uZmlnKSB7XG4gICAgICByZXR1cm4gKCEkcm9vdFNjb3BlLnRva2VuIHx8IGNvbmZpZy51cmwuaW5kZXhPZignLmh0bWwnKSA+IDApO1xuICAgIH1cbiAgfV0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFdOdmNtVXZabVl1WTI5eVpTNWpiMjVtYVdjdWFuTWlMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl5WVdaaFpXeG1aWEp1WVc1a1pYTXZVSEp2YW1WamRITXZabWwwTFdaaFkyVmliMjlyTDNkM2R5OXdkV0pzYVdNdmJXOWtkV3hsY3k5bVppMWpiM0psTDJabUxtTnZjbVV1WTI5dVptbG5MbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRVUVzVjBGQlZ5eERRVUZETzBGQlExb3NTMEZCU3l4UlFVRlJMRVZCUVVrc1JVRkJReXh0UWtGQmEwSXNRMEZCUnl4blFrRkJZeXhEUVVGSExGVkJRVkVzUTBGQlJ5eFBRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTXhSU3hQUVVGVExFOUJRVXNzUTBGQlJTeHBRa0ZCWjBJc1EwRkJSeXhEUVVGQkxHRkJRVmtzUTBGQlJ5eERRVUZCTEU5QlFVMHNRMEZCUnp0QlFVTjZSQ3hyUWtGQlowSXNWVUZCVlN4QlFVRkRMRU5CUVVNc1NVRkJSeXhEUVVGRExFTkJRVU03UVVGRGFrTXNZMEZCV1N4aFFVRmhMRXRCUVVzc1FVRkJReXhEUVVGRExFTkJRVU1zV1VGQlZ5eERRVUZITEZWQlFWTXNWVUZCVXl4RFFVRkhPMEZCUTJ4RkxGTkJRVThzUlVGQlF5eFRRVUZSTEVOQlFVY3NWVUZCVXl4TlFVRkxMRU5CUVVjN1FVRkRhRU1zWVVGQlR5eERRVUZCTEZGQlFVOHNRVUZCUXl4RFFVRkRMRTFCUVVzc1EwRkJReXhEUVVGRE8wMUJRM3BDTEVOQlFVTXNRMEZCUXp0QlFVTktMRmRCUVZNc1UwRkJUeXhEUVVGRkxFMUJRVXNzUTBGQlJ6dEJRVU40UWl4VFFVRkpMR2xDUVVGblFpeEJRVUZETEVOQlFVTXNUVUZCU3l4RFFVRkRPMEZCUXpGQ0xHRkJRVThzVDBGQlN5eERRVUZETzBGQlFVRXNRVUZEWml4VFFVRkpMRTFCUVVzc1NVRkJTU3hSUVVGUkxFRkJRVU1zUTBGQlF5eFZRVUZUTEVOQlFVTXNRMEZCUVN4RFFVRkpMRVZCUVVFc1EwRkJSenRCUVVOMFF5eGhRVUZQTEVOQlFVRXNhVUpCUVdkQ0xFRkJRVU1zUTBGQlF5eE5RVUZMTEVOQlFVTXNRMEZCUXp0TlFVTnNRenRCUVVGQkxFRkJRMEVzVjBGQlR5eFBRVUZMTEVOQlFVTTdTVUZEWmp0QlFVRkJMRUZCUTBFc1YwRkJVeXhyUWtGQlowSXNRMEZCUlN4TlFVRkxMRU5CUVVjN1FVRkRha01zVjBGQlN5eEpRVUZKTEVWQlFVa3NRMEZCUVN4cFJFRkJaMFFzUlVGQlNTeERRVUZCTEZWQlFWTXNUVUZCVFN4RFFVRkJMRU5CUVVrc1NVRkJSU3hEUVVGQkxFTkJRVWtzUTBGQlFTeE5RVUZMTEVsQlFVa3NVVUZCVVN4QlFVRkRMRU5CUVVNc1dVRkJWeXhEUVVGSExFZEJRVU1zUTBGQlF5eERRVUZCTEVOQlFVa3NhMFZCUVdkRkxFTkJRVU03UVVGRGJFMHNWMEZCVHl4UFFVRkxMRU5CUVVNN1NVRkRaanRCUVVGQkxFRkJRMEVzVjBGQlV5eHJRa0ZCWjBJc1EwRkJSU3hOUVVGTExFTkJRVWM3UVVGRGFrTXNWMEZCVHl4RlFVRkRMRU5CUVVNc1ZVRkJVeXhOUVVGTkxFTkJRVUVzUlVGQlN5eERRVUZCTEUxQlFVc3NTVUZCU1N4UlFVRlJMRUZCUVVNc1EwRkJReXhQUVVGTkxFTkJRVU1zUTBGQlFTeERRVUZKTEVWQlFVRXNRMEZCUXl4RFFVRkRPMGxCUXk5RU8wRkJRVUVzUlVGRFJpeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTk1PMEZCUVVFaUxDSnpiM1Z5WTJWU2IyOTBJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXTnZjbVV2SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZzbkpHeHZZMkYwYVc5dVVISnZkbWxrWlhJbkxDQW5KR2gwZEhCUWNtOTJhV1JsY2ljc0lDZG1abFJ2YTJWdUp5d2dZMjl1Wm1sblhUdGNibVoxYm1OMGFXOXVJR052Ym1acFp5Z2tiRzlqWVhScGIyNVFjbTkyYVdSbGNpd2dKR2gwZEhCUWNtOTJhV1JsY2l3Z1ptWlViMnRsYmlrZ2UxeHVJQ0FrYkc5allYUnBiMjVRY205MmFXUmxjaTVvZEcxc05VMXZaR1VvZEhKMVpTazdYRzRnSUNSb2RIUndVSEp2ZG1sa1pYSXVhVzUwWlhKalpYQjBiM0p6TG5CMWMyZ29XeWNrY205dmRGTmpiM0JsSnl3Z1puVnVZM1JwYjI0b0pISnZiM1JUWTI5d1pTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCN0ozSmxjWFZsYzNRbk9pQm1kVzVqZEdsdmJpaGpiMjVtYVdjcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRmtaRlJ2YTJWdUtHTnZibVpwWnlrN1hHNGdJQ0FnSUNCOWZUdGNiaUFnSUNCbWRXNWpkR2x2YmlCaFpHUlViMnRsYmloamIyNW1hV2NwSUh0Y2JpQWdJQ0FnSUdsbUlDaHphRzkxYkdST2IzUkJaR1JVYjJ0bGJpaGpiMjVtYVdjcEtWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOXVabWxuTzF4dUlDQWdJQ0FnYVdZZ0tHTnZibVpwWnk1MWNtd3VhVzVrWlhoUFppZ25abUZqWldKdmIyc25LU0ErSURBcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWnZjbTFoZEVaaFkyVmliMjlyVlhKc0tHTnZibVpwWnlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnWTI5dVptbG5PMXh1SUNBZ0lIMWNiaUFnSUNCbWRXNWpkR2x2YmlCbWIzSnRZWFJHWVdObFltOXZhMVZ5YkNoamIyNW1hV2NwSUh0Y2JpQWdJQ0FnSUdOdmJtWnBaeTUxY213Z1BTQW5hSFIwY0hNNkwyZHlZWEJvTG1aaFkyVmliMjlyTG1OdmJTOTJNaTQwTDIxbFAyRmpZMlZ6YzE5MGIydGxiajBuSUNzZ0pISnZiM1JUWTI5d1pTNTBiMnRsYmlBcklDY21KeUFySUdOdmJtWnBaeTUxY213dWNtVndiR0ZqWlNnbkwyWmhZMlZpYjI5ckx5Y3NJQ2NuS1NBcklDY21aR1ZpZFdjOVlXeHNKbVp2Y20xaGREMXFjMjl1Sm0xbGRHaHZaRDFuWlhRbWNISmxkSFI1UFRBbWMzVndjSEpsYzNOZmFIUjBjRjlqYjJSbFBURW5PMXh1SUNBZ0lDQWdjbVYwZFhKdUlHTnZibVpwWnp0Y2JpQWdJQ0I5WEc0Z0lDQWdablZ1WTNScGIyNGdjMmh2ZFd4a1RtOTBRV1JrVkc5clpXNG9ZMjl1Wm1sbktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0tDRWtjbTl2ZEZOamIzQmxMblJ2YTJWdUlIeDhJR052Ym1acFp5NTFjbXd1YVc1a1pYaFBaaWduTG1oMGJXd25LU0ErSURBcE8xeHVJQ0FnSUgxY2JpQWdmVjBwTzF4dWZWeHVYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybE1NVlo2V2xoS2Vrd3pTbWhhYlVac1lrZGFiR050TldoaWJWSnNZM2s1VVdOdE9YRmFWMDR3WTNrNWJXRllVWFJhYlVacVdsZEtkbUl5YzNaa00yUXpURE5DTVZsdGVIQlplVGwwWWpKU01XSkhWbnBNTWxwdFRGZE9kbU50VlhaYWJWbDFXVEk1ZVZwVE5XcGlNalZ0WVZkamRXRnVUV2xNUTBwNllqTldlVmt5Vm5wSmFuQmlTV2s1Vm1NeVZubGplVGw1V1ZkYWFGcFhlRzFhV0VwMVdWYzFhMXBZVFhaVlNFcDJZVzFXYW1SSVRYWmFiV3d3VEZkYWFGa3lWbWxpTWpseVRETmtNMlI1T1hka1YwcHpZVmROZG1KWE9XdGtWM2hzWTNrNWJWcHBNV3BpTTBwc1RESmFiVXh0VG5aamJWVjFXVEk1ZFZwdGJHNU1iWEI2U1d3d2MwbHROV2hpVjFaNlNXcHdZbGhUZDJsaVYwWjNZMGRzZFZvelRXbFBhVXBDVVZWR1FrOHdSa0pSVlVWelV6QkdRbE41ZUZKUlZVWlNURVZXUWxGVmEzTlNWVVpDVVhsNGRGRnJSa0poTUVselVUQkdRbEo1ZUc1UmEwWkNXWGw0UkZGVlJraE1SbFpDVVZaRmMxRXdSa0pTZVhoUVVWVkdURXhGVGtKUlZVMXpVVEJHUWxGNmRFSlJWVlY0VWxONFVGRlZSbFJNUlRsQ1VWVnpjMUV3UmtKU1UzaHdVV3RHUWxvd1NYTlJNRVpDVW5sNFJGRlZSa0pNUjBaQ1VWWnJjMUV3UmtKU2VYaEVVVlZHUWt4Rk9VSlJWVEJ6VVRCR1FsSlVkRUpSVlU0MFVrTjRjbEZyUmtKYU1FbHpWbFZHUWxaVGVFSlJWVVpFVEVWT1FsRlZUWE5UVlVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOTjFGVlJrUmhhMDF6V1RCR1FsZFRlR2hSVlVab1RFVjBRbEZWYzNOUlZVWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxZFZSa0pXZVhoRVVWVkdTRXhHVmtKUlZrMXpWbFZHUWxWNWVFUlJWVVpJVHpCR1FsRXllRVpNUms1Q1VWVTRjMUpWUmtSVVEzaFVVVlZHVWt4RlRrSlJWV056VmxWR1FsWlRlRTVSVlVaTVRFVk9RbEZWWXpkUlZVWkVUVEJKYzFsVlJrSlVlWGhFVVZWR1FreEdSa0pSVlRoelVWVkdRbEY1ZUVSUlZVWkVURVV4UWxGVmMzTlJNRVpDVVhsNFJGRlZSa1JQTURGQ1VUTndRMHhGVGtKUk1GbHpVVEJHUWxGNmRFSlJWVlpGVEVaa1FsRldUWE5WTUVaQ1ZIbDRSRkZWUmtaTVJURkNVVlZ6YzFFd1JrSlNWSFJDVVZWT01sRnBlRlJSVlVaS1RFZHNRMUZWUm01UmFYaENVVlZHUkV4RlRrSlJWVTF6VkZWR1FsTjVlRVJSVlVaRVR6QkdRbEZWWTNOWlZVWkNWSGw0VUZGVlJreE1SVTVDVVZWTk4xRlZSa0pSVTNoQ1VWVlZNVkY1ZUZSUlZVWktURVV4UWxGVmMzTlRWVVpDVTFONFVsRlZSbEpNUlVaQ1VWVk5jMUV3UmtKUmVYaFdVVlZHVkV4RlRrSlJWVTF6VVRCR1FsRlRlRVJSVlVaR1RFVldRbEZWUlhOUk1FWkNVbFIwUWxGVlRuVlJlWGhvVVZWR1VFeEZUa0pSVlVWellWVktRbEZYWkVOTVJVWkNVVlZOYzFFd1JrSlJlWGhPVVZWR1RFeEZUa0pSVlUxelVUQkdRbEZVZEU1UlZVNXhVWHAwUWxGVlJrSk1SVVpDVVRCRmMxWXdSa0pVZVhoUVVWVkdURXhGVGtKUlZVMDNVMVZHUkZwcWRFSlJWVVpDVEVWR1FsSlZSWE5XTUVaQ1ZYbDRjbEZyUmtKYU1FbHpVVEJHUWxKVGVFNVJWVVpNVEVWT1FsRlZWVGRSVlVaRVlVVk5jMVl3UmtKVGVYaEtVVlZHU2t4RlZrSlJWV3R6VVRCR1FsRlRlSEJTUlVaQ1dqQlJjMUpWUmtSbGExRnpVVEJHUWxGVGVGWlJWVVpVVEVVeFFsRlZNSE5STUVaQ1VWTjRSRkZWUmtwTVJXeENVVlZWYzFFd1JrSlJVM2hFVVZWR1NreEZUa0pSVlVWelZGVkdRbE41ZUVwUlZVWktURVpHUWxGV1JYTlJWVVpDVVhsNFJGRlZSa1JNUm14Q1VWWmpjMUV3UmtKU1UzaElVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRlRlRVJSVlUxNlVrTjRjbEpWUmtKYU1GVnpVVEJHUWxGVWRFSlJWVTUzVWxONFdGRlZSbEJNUlRsQ1VWVnpjMUV3UmtKUmVuUktVVlZPYlU4d1JrSlJWVVZ6VVZWR1JsRlRlRmhSVlVaVVRFZDBRMUZWUm01UmFYaEVVVlZHUmt4Rk1VSlJWWE56VVRCR1FsSlVkRUpSVlU1dlVYbDRXRkZWUmxCTVJWWkNVVlZOYzFFd1JrSlJlWGhXVVZWR1ZFeEZNVUpSVlRCelVUQkdRbEZUZUVaUlZVWk1URVZPUWxGVlJYTlVWVVpDVTNsNFNsRlZSa3BNUmtaQ1VWWkZjMUZWUmtKUmVYaEVVVlZHUkV4Rk9VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaQ1RFVk9RbEZWYTNOU1ZVWkNVVk40UkZGVlJrUk1SVTVDVVZWRk4xTlZSa1JQVlZFM1VWVkdRbEZUZUVaUlZWWkhURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa0pQTUVaQ1VsVnZOMUZWUmtKUlUwbHpTVzVPZG1SWVNtcGFWa3AyWWpOUmFVOXBTWFpXV0U1c1kyNU5kbU50Um0xWlYxWnpXbTFXZVdKdFJuVmFSMVo2VERGQ2VXSXljR3haTTFKNlRESmFjR1JETVcxWlYwNXNXVzA1ZG1GNU9UTmtNMk4yWTBoV2FXSkhiR3BNTWpGMldraFdjMXBZVFhaYWJWbDBXVEk1ZVZwVE9HbE1RMHA2WWpOV2VWa3lWbnBSTWpsMVpFZFdkV1JEU1RaWGVVcDBZakpTTVdKSFZYVmFXR2gzWWpOS01HTjVRVGxKUm5OdVNrZDRkbGt5UmpCaFZ6bDFWVWhLZG1SdGJHdGFXRWx1VEVOQmJrcEhhREJrU0VKUlkyMDVNbUZYVW14amFXTnpTVU5rYlZwc1VuWmhNbFoxU25sM1oxa3lPWFZhYld4dVdGUjBZMkpzZUhWYWJsWjFXVE5TY0dJeU5HZFpNamwxV20xc2JrdERVbk5pTWs1b1pFZHNkbUpzUW5saU0xcHdXa2RXZVV4RFFXdGhTRkl3WTBaQ2VXSXpXbkJhUjFaNVRFTkNiVnBzVW5aaE1sWjFTMWgwWTJKcFFXZEtSM2gyV1RKR01HRlhPWFZWU0VwMlpHMXNhMXBZU1hWaFNGSjBZa1JXVG1JeVVteExTRko1WkZkVmNFOHhlSFZKUTBGcllVaFNNR05HUW5saU0xcHdXa2RXZVV4dGJIVmtSMVo1V1RKV2QyUkhPWGxqZVRWM1pGaE9iMHRHYzI1S1NFcDJZak5TVkZreU9YZGFVMk56U1VkYU1XSnRUakJoVnpsMVMwTlNlV0l5T1RCVk1rNTJZMGRWY0VsSWRHTmlhVUZuU1VOQ2VWcFlVakZqYlRSblpURjRkVWxEUVdkSlEwRm5Tak5LYkdOWVZteGpNMUZ1VDJsQ2JXUlhOV3BrUjJ4MlltbEJiMWt5T1hWYWJXeHVTMU5DTjFoSE5HZEpRMEZuU1VOQlowbElTbXhrU0ZaNVltbENhRnBIVWxWaU1uUnNZbWxvYW1JeU5XMWhWMk53VHpGNGRVbERRV2RKUTBGblpsWjRkVWxEUVdkSlNEQTNXRWMxWTJKcFFXZEpRMEp0WkZjMWFtUkhiSFppYVVKb1drZFNWV0l5ZEd4aWFXaHFZakkxYldGWFkzQmxNWGgxU1VOQlowbERRV2RoVjFsblMwaE9iMkl6Vm5OYVJUVjJaRVZHYTFwR1VuWmhNbFoxUzBkT2RtSnRXbkJhZVd0d1NVaEtiR1JJVm5saWFVSnFZakkxYldGWFl6ZFlSelJuU1VOQlowbERRbU5pYVVGblNVTkJaMGxIYkcxSlEyaHFZakkxYldGWFkzVmtXRXB6VEcxc2RWcEhWalJVTWxsdlNqSmFhRmt5Vm1saU1qbHlTbmxySzAxRGJEZFlSelJuU1VOQlowbERRV2RKU0Vwc1pFaFdlV0pwUW0xaU0wcDBXVmhTUjFsWFRteFpiVGwyWVRGV2VXSkRhR3BpTWpWdFlWZGpjRmhITkdkSlEwRm5TVU5DT1ZoSE5HZEpRMEZuU1VOQ2VWcFlVakZqYlRSbldUSTVkVnB0Ykc1UE1YaDFTVU5CWjBsSU1XTmliSGgxU1VOQlowbEhXakZpYlU0d1lWYzVkVWxIV25aamJURm9aRVZhYUZreVZtbGlNamx5VmxoS2MwdEhUblppYlZwd1dubHNOMWhITkdkSlEwRm5TVU5DYW1JeU5XMWhWMk4xWkZoS2MwbEVNR2RLTW1nd1pFaENlazlwT1c1amJVWjNZVU0xYlZsWFRteFpiVGwyWVhrMWFtSXlNSFprYWtsMVRrTTVkRnBVT1doWk1rNXNZek5PWm1SSE9YSmFWelE1U25sQ1kySnBRV2RKUTBGblNVTkJaMHQ1UVd0amJUbDJaRVpPYW1JelFteE1ibEoyWVRKV2RVbERjMmRLZVZsdVNVTnpaMWt5T1hWYWJXeHVURzVXZVdKRE5YbGFXRUp6V1ZkT2JFdERZM1phYlVacVdsZEtkbUl5YzNaS2VYZHVTbmxyWjFoSE5HZEpRMEZuU1VOQlowbERjMmRLZVZwcldsZEtNVnA2TVdoaVIzZHRXbTA1ZVdKWFJqQlFWM0I2WWpJMGJXSlhWakJoUnpsclVGZGtiR1JEV25kamJWWXdaRWhyT1UxRFducGtXRUozWTIxV2VtTXhPVzlrU0ZKM1dESk9kbHBIVlRsTlUyUmpZbWxCWjBsRFFXZEpTRXBzWkVoV2VXSnBRbXBpTWpWdFlWZGpOMWhITkdkSlEwRm5abFo0ZFZoSE5HZEpRMEZuV201V2RWa3pVbkJpTWpSbll6Sm9kbVJYZUd0VWJUa3dVVmRTYTFaSE9YSmFWelJ2V1RJNWRWcHRiRzVMV0hSalltbEJaMGxEUVdkSlNFcHNaRWhXZVdKcFFXOUpVMUo1WWpJNU1GVXlUblpqUjFWMVpFYzVjbHBYTkdkbVNIZG5XVEk1ZFZwdGJHNU1ibFo1WWtNMWNHSnRVbXhsUlRsdFMwTmpkV0ZJVW5SaVEyTndTVVEwWjAxRGEyZEpSbmgxU1VOQlowbElNV05pYkhoMVNVTkNPVmhUYkdOaWJIaDFabFo0ZFVsc01UbGNiaTh2SXlCemIzVnlZMlZWVWt3OUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OXRiMlIxYkdWekwyWm1MV052Y21VdlptWXVZMjl5WlM1amIyNW1hV2N1YW5NaVhYMD1cbi8vIyBzb3VyY2VVUkw9L1VzZXJzL3JhZmFlbGZlcm5hbmRlcy9Qcm9qZWN0cy9maXQtZmFjZWJvb2svd3d3L3B1YmxpYy9tb2R1bGVzL2ZmLWNvcmUvZmYuY29yZS5jb25maWcuanMiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBbJyRzY29wZScsICckbG9jYXRpb24nLCAnZmZUb2tlbicsICckd2luZG93JywgJyRyb290U2NvcGUnLCAnJGh0dHAnLCBmZkNvcmVDb250cm9sbGVyXTtcbmZ1bmN0aW9uIGZmQ29yZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9jYXRpb24sIGZmVG9rZW4sICR3aW5kb3csICRyb290U2NvcGUsICRodHRwKSB7XG4gIHZhciB2bSA9IHRoaXM7XG4gIHZhciBjb2RlO1xuICBsb2FkVG9rZW4oKTtcbiAgY2xlYXJVcmwoKTtcbiAgZnVuY3Rpb24gbG9hZFRva2VuKCkge1xuICAgIGlmICghJHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpXG4gICAgICByZXR1cm47XG4gICAgY29kZSA9IGdldFBhcmFtZXRlckJ5TmFtZSgnY29kZScpO1xuICAgICRodHRwLmdldCgnL2F1dGhvcml6ZS8/Y29kZT0nICsgY29kZSkuc3VjY2VzcyhnZXRUb2tlbikuZXJyb3IoZmFpbFRvR2V0VG9rZW4pO1xuICB9XG4gIGZ1bmN0aW9uIGdldFRva2VuKGRhdGEpIHtcbiAgICB2bS50b2tlbiA9ICRyb290U2NvcGUudG9rZW4gPSBkYXRhLmFjY2Vzc190b2tlbjtcbiAgfVxuICBmdW5jdGlvbiBmYWlsVG9HZXRUb2tlbihlcnJvcikge1xuICAgIHZtLmVycm9yTWVzc2FnZSA9IGVycm9yO1xuICB9XG4gIGZ1bmN0aW9uIGNsZWFyVXJsKCkge1xuICAgIGhpc3RvcnkucHVzaFN0YXRlKFwiXCIsIGRvY3VtZW50LnRpdGxlLCAkd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRQYXJhbWV0ZXJCeU5hbWUobmFtZSkge1xuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtdLywgXCJcXFxcW1wiKS5yZXBsYWNlKC9bXFxdXS8sIFwiXFxcXF1cIik7XG4gICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIltcXFxcPyZdXCIgKyBuYW1lICsgXCI9KFteJiNdKilcIiksXG4gICAgICAgIHJlc3VsdHMgPSByZWdleC5leGVjKCR3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICByZXR1cm4gcmVzdWx0cyA9PT0gbnVsbCA/IFwiXCIgOiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1sxXS5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKTtcbiAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFdOdmNtVXZabVl1WTI5eVpTNWpiMjUwY205c2JHVnlMbXB6SWl3aWMyOTFjbU5sY3lJNld5SXZWWE5sY25NdmNtRm1ZV1ZzWm1WeWJtRnVaR1Z6TDFCeWIycGxZM1J6TDJacGRDMW1ZV05sWW05dmF5OTNkM2N2Y0hWaWJHbGpMMjF2WkhWc1pYTXZabVl0WTI5eVpTOW1aaTVqYjNKbExtTnZiblJ5YjJ4c1pYSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkJRU3hYUVVGWExFTkJRVU03UVVGRFdpeExRVUZMTEZGQlFWRXNSVUZCU1N4RlFVRkRMRkZCUVU4c1EwRkJSeXhaUVVGVkxFTkJRVWNzVlVGQlVTeERRVUZITEZWQlFWRXNRMEZCUnl4aFFVRlhMRU5CUVVjc1VVRkJUU3hEUVVGSExHbENRVUZsTEVOQlFVTXNRMEZCUXp0QlFVTjJSeXhQUVVGVExHbENRVUZsTEVOQlFVVXNUVUZCU3l4RFFVRkhMRU5CUVVFc1UwRkJVU3hEUVVGSExFTkJRVUVzVDBGQlRTeERRVUZITEVOQlFVRXNUMEZCVFN4RFFVRkhMRU5CUVVFc1ZVRkJVeXhEUVVGSExFTkJRVUVzUzBGQlNTeERRVUZITzBGQlEyaEdMRUZCUVVrc1NVRkJRU3hEUVVGQkxFVkJRVU1zUlVGQlNTeExRVUZITEVOQlFVTTdRVUZEWWl4QlFVRkpMRWxCUVVFc1EwRkJRU3hKUVVGSExFTkJRVU03UVVGRFVpeFZRVUZSTEVGQlFVTXNSVUZCUXl4RFFVRkRPMEZCUTFnc1UwRkJUeXhCUVVGRExFVkJRVU1zUTBGQlF6dEJRVU5XTEZOQlFWTXNWVUZCVVN4RFFVRkRMRUZCUVVNc1EwRkJSVHRCUVVOdVFpeFBRVUZKTEVOQlFVTXNUMEZCVFN4VFFVRlRMRTlCUVU4N1FVRkRla0lzV1VGQlRUdEJRVUZCTEVGQlExSXNUMEZCUnl4RlFVRkpMRU5CUVVFc2EwSkJRV2xDTEVGQlFVTXNRMEZCUXl4TlFVRkxMRU5CUVVNc1EwRkJRenRCUVVOcVF5eFJRVUZKTEVsQlFVa3NRVUZCUXl4RFFVRkRMRzFDUVVGclFpeEZRVUZKTEV0QlFVY3NRMEZCUXl4UlFVRlJMRUZCUVVNc1EwRkJReXhSUVVGUExFTkJRVU1zVFVGQlRTeEJRVUZETEVOQlFVTXNZMEZCWVN4RFFVRkRMRU5CUVVNN1JVRkRMMFU3UVVGQlFTeEJRVU5CTEZOQlFWTXNVMEZCVHl4RFFVRkZMRWxCUVVjc1EwRkJSenRCUVVOMFFpeExRVUZETEUxQlFVMHNSVUZCU1N4RFFVRkJMRlZCUVZNc1RVRkJUU3hGUVVGSkxFTkJRVUVzU1VGQlJ5eGhRVUZoTEVOQlFVTTdSVUZEYWtRN1FVRkJRU3hCUVVOQkxGTkJRVk1zWlVGQllTeERRVUZGTEV0QlFVa3NRMEZCUnp0QlFVTTNRaXhMUVVGRExHRkJRV0VzUlVGQlNTeE5RVUZKTEVOQlFVTTdSVUZEZWtJN1FVRkJRU3hCUVVOQkxGTkJRVk1zVTBGQlR5eERRVUZETEVGQlFVTXNRMEZCUlR0QlFVTnNRaXhWUVVGTkxGVkJRVlVzUVVGQlF5eERRVUZETEVWQlFVTXNRMEZCUnl4RFFVRkJMRkZCUVU4c1RVRkJUU3hEUVVGSExFTkJRVUVzVDBGQlRTeFRRVUZUTEZOQlFWTXNRMEZCUXl4RFFVRkRPMFZCUTJ4Rk8wRkJRVUVzUVVGRFFTeFRRVUZUTEcxQ1FVRnBRaXhEUVVGRkxFbEJRVWNzUTBGQlJ6dEJRVU5vUXl4UFFVRkhMRVZCUVVrc1EwRkJRU3hKUVVGSExGRkJRVkVzUVVGQlF5eERRVUZETEUxQlFVc3NRMEZCUnl4TlFVRkpMRU5CUVVNc1VVRkJVU3hCUVVGRExFTkJRVU1zVFVGQlN5eERRVUZITEUxQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTNwRUxFRkJRVWtzVFVGQlFTeERRVUZCTEV0QlFVa3NSVUZCU1N4SlFVRkpMRTlCUVVzc1FVRkJReXhEUVVGRExGRkJRVThzUlVGQlNTeExRVUZITEVOQlFVRXNRMEZCU1N4WlFVRlZMRU5CUVVNN1FVRkRhRVFzWTBGQlRTeEZRVUZKTEVOQlFVRXNTMEZCU1N4TFFVRkxMRUZCUVVNc1EwRkJReXhQUVVGTkxGTkJRVk1zVDBGQlR5eERRVUZETEVOQlFVTTdRVUZEYWtRc1UwRkJUeXhEUVVGQkxFOUJRVTBzU1VGQlRTeExRVUZITEVOQlFVRXNRMEZCU1N4SFFVRkRMRVZCUVVrc1EwRkJRU3hyUWtGQmFVSXNRVUZCUXl4RFFVRkRMRTlCUVUwc1EwRkJSU3hEUVVGQkxFTkJRVU1zVVVGQlVTeEJRVUZETEVOQlFVTXNTMEZCU1N4RFFVRkhMRWxCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRGJrWTdRVUZCUVN4QlFVTkdPMEZCUVVFaUxDSnpiM1Z5WTJWU2IyOTBJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXTnZjbVV2SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZzbkpITmpiM0JsSnl3Z0p5UnNiMk5oZEdsdmJpY3NJQ2RtWmxSdmEyVnVKeXdnSnlSM2FXNWtiM2NuTENBbkpISnZiM1JUWTI5d1pTY3NJQ2NrYUhSMGNDY3NJR1ptUTI5eVpVTnZiblJ5YjJ4c1pYSmRPMXh1Wm5WdVkzUnBiMjRnWm1aRGIzSmxRMjl1ZEhKdmJHeGxjaWdrYzJOdmNHVXNJQ1JzYjJOaGRHbHZiaXdnWm1aVWIydGxiaXdnSkhkcGJtUnZkeXdnSkhKdmIzUlRZMjl3WlN3Z0pHaDBkSEFwSUh0Y2JpQWdkbUZ5SUhadElEMGdkR2hwY3p0Y2JpQWdkbUZ5SUdOdlpHVTdYRzRnSUd4dllXUlViMnRsYmlncE8xeHVJQ0JqYkdWaGNsVnliQ2dwTzF4dUlDQm1kVzVqZEdsdmJpQnNiMkZrVkc5clpXNG9LU0I3WEc0Z0lDQWdhV1lnS0NFa2QybHVaRzkzTG14dlkyRjBhVzl1TG5ObFlYSmphQ2xjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCamIyUmxJRDBnWjJWMFVHRnlZVzFsZEdWeVFubE9ZVzFsS0NkamIyUmxKeWs3WEc0Z0lDQWdKR2gwZEhBdVoyVjBLQ2N2WVhWMGFHOXlhWHBsTHo5amIyUmxQU2NnS3lCamIyUmxLUzV6ZFdOalpYTnpLR2RsZEZSdmEyVnVLUzVsY25KdmNpaG1ZV2xzVkc5SFpYUlViMnRsYmlrN1hHNGdJSDFjYmlBZ1puVnVZM1JwYjI0Z1oyVjBWRzlyWlc0b1pHRjBZU2tnZTF4dUlDQWdJSFp0TG5SdmEyVnVJRDBnSkhKdmIzUlRZMjl3WlM1MGIydGxiaUE5SUdSaGRHRXVZV05qWlhOelgzUnZhMlZ1TzF4dUlDQjlYRzRnSUdaMWJtTjBhVzl1SUdaaGFXeFViMGRsZEZSdmEyVnVLR1Z5Y205eUtTQjdYRzRnSUNBZ2RtMHVaWEp5YjNKTlpYTnpZV2RsSUQwZ1pYSnliM0k3WEc0Z0lIMWNiaUFnWm5WdVkzUnBiMjRnWTJ4bFlYSlZjbXdvS1NCN1hHNGdJQ0FnYUdsemRHOXllUzV3ZFhOb1UzUmhkR1VvWENKY0lpd2daRzlqZFcxbGJuUXVkR2wwYkdVc0lDUjNhVzVrYjNjdWJHOWpZWFJwYjI0dWNHRjBhRzVoYldVcE8xeHVJQ0I5WEc0Z0lHWjFibU4wYVc5dUlHZGxkRkJoY21GdFpYUmxja0o1VG1GdFpTaHVZVzFsS1NCN1hHNGdJQ0FnYm1GdFpTQTlJRzVoYldVdWNtVndiR0ZqWlNndlcxeGNXMTB2TENCY0lseGNYRnhiWENJcExuSmxjR3hoWTJVb0wxdGNYRjFkTHl3Z1hDSmNYRnhjWFZ3aUtUdGNiaUFnSUNCMllYSWdjbVZuWlhnZ1BTQnVaWGNnVW1WblJYaHdLRndpVzF4Y1hGdy9KbDFjSWlBcklHNWhiV1VnS3lCY0lqMG9XMTRtSTEwcUtWd2lLU3hjYmlBZ0lDQWdJQ0FnY21WemRXeDBjeUE5SUhKbFoyVjRMbVY0WldNb0pIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1elpXRnlZMmdwTzF4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhSeklEMDlQU0J1ZFd4c0lEOGdYQ0pjSWlBNklHUmxZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaHlaWE4xYkhSeld6RmRMbkpsY0d4aFkyVW9MMXhjS3k5bkxDQmNJaUJjSWlrcE8xeHVJQ0I5WEc1OVhHNWNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdSaGRHRTZZWEJ3YkdsallYUnBiMjR2YW5OdmJqdGlZWE5sTmpRc1pYbEtNbHBZU25waFZ6bDFTV3B2ZWt4RFNtMWhWM2hzU1dwdmFVd3hWbnBhV0VwNlRETkthRnB0Um14aVIxcHNZMjAxYUdKdFVteGplVGxSWTIwNWNWcFhUakJqZVRsdFlWaFJkRnB0Um1wYVYwcDJZakp6ZG1RelpETk1NMEl4V1cxNGNGbDVPWFJpTWxJeFlrZFdla3d5V20xTVYwNTJZMjFWZGxwdFdYVlpNamw1V2xNMWFtSXlOVEJqYlRsellrZFdlVXh0Y0hwSmFYZHBZekk1TVdOdFRteGplVWsyVjNsSmRsWllUbXhqYmsxMlkyMUdiVmxYVm5OYWJWWjVZbTFHZFZwSFZucE1NVUo1WWpKd2JGa3pVbnBNTWxwd1pFTXhiVmxYVG14WmJUbDJZWGs1TTJRelkzWmpTRlpwWWtkc2Frd3lNWFphU0ZaeldsaE5kbHB0V1hSWk1qbDVXbE01YlZwcE5XcGlNMHBzVEcxT2RtSnVVbmxpTW5oeldsaEpkV0Z1VFdsWVUzZHBZbTFHZEZwWVRXbFBiSFJrVEVOS2RGbFlRbmRoVnpWdVkzbEpOa2xyUmtKUlZVVTNVVlZHUWxGVGVFeFJWVVpNVEVaR1FsRldSWE5TVlVaQ1UxTjRSbEZWUmtSTVJrWkNVVlU0YzFFd1JrSlNlWGhhVVZWR1ZreEZUa0pSVldOelZsVkdRbFZUZUVSUlZVWklURVpXUWxGV1JYTlJNRVpDVW5sNGFGRlZSbGhNUlU1Q1VWVmpjMVZWUmtKVVUzaEVVVlZHU0V4SGJFTlJWVVpzVEVWT1FsRlZUWE5STUVaQ1VWUjBRbEZXVmpCU2VYaFFVVlZHVkV4SGJFTlJWVVpzVEVWT1FsRlZWWE5VVlVaQ1UzbDRSRkZWUmtoTVJVNUNVVlZGYzFVd1JrSlZVM2hFVVZWR1NFeEZUa0pSVlVWelZEQkdRbFJUZUVSUlZVWklURVZPUWxGVlJYTlVNRVpDVkZONFJGRlZSa2hNUlU1Q1VWVkZjMVpWUmtKVmVYaEVVVlZHU0V4RlRrSlJWVVZ6VXpCR1FsTlRlRVJSVlVaSVR6QkdRbEV5YUVkTVJVWkNVVlZyYzFOVlJrSlJVM2hFVVZWR1FreEZWa0pSVlUxelVsVkdRbE5UZUV4UlZVWklURVZPUWxGVlRUZFJWVVpFV1dsNFFsRlZSa3BNUld4Q1VWVkZjMUV3UmtKUlUzaEtVVlZHU0V4RlRrSlJWVTAzVVZWR1JGVnBlRlpSVlVaU1RFVkdRbEZWVFhOU1ZVWkNVWGw0UkZGVlJrUlBNRVpDVVRGbmMxVXdSa0pVZVhoQ1VWVkdSRXhGVmtKUlZVMXpVVEJHUWxGNmRFSlJWVlpYVEVaT1FsRldUWE5XVlVaQ1ZWTjRSRkZWUmtSTVJVWkNVVlZOYzFFd1JrSlJlblJDVVZWT2MxRnBlRkJSVlVaSVRFVk9RbEZWVFhOVU1FWkNWRk40VkZGVlJsUk1SVGxDVVZVNE4xRlZSa0pTZVhoYVVWVkdUazh3UmtKUlZVVnpVVlZHUm1KclRYTlVNRVpDVW5sNFJsRlZSa3BNUlU1Q1VWVkZjMkV3U2tKUlYyeERURVZHUWxGVlRYTlJNRVpDVVhsNFRsRlZSa3hNUlU1Q1VWVk5jMUV3UmtKUmVuUkNVVlZPY1ZGNWVGSlJWVVpLVEVWc1FsRlZhM05SVlVaQ1VYbDRSRkZWUmtSTVJ6RkRVVlZHY2xGcGVFWlJWVVpJVEVWMFFsRlZZM05STUVaQ1VYbDRVbEZWVGpKUmFYaENVVlZHUkV4RlRrSlJWVTF6VlZWR1FsUjVlRVJSVlVaRVRFVXhRbEV4YjNOUlZVWkNVWGw0UkZGVlJrUk1SMDVDVVZkRmMxRXdSa0pSZVhoRVVWVkdSRTh3VmtKUmVtUkRUekJHUWxGVlJYTlJWVVpHVVZONFZGRlZSbFJNUms1Q1VWVTRjMUV3UmtKU1UzaEtVVlZHU0V4RlRrSlJWVlUzVVZWR1JHTnJTWE5UTUVaQ1VYbDRUbEZWUms1TVJWWkNVVlZyYzFFd1JrSlJVM2hXVVZWR1ZFeEZNVUpSVlRCelVsVkdRbE5UZUVSUlZVWkNURVZzUWxGVlkzTlpWVVpDV1ZONFJGRlZSa1JQTUZaQ1VUSndSVTh3UmtKUlZVVnpVVlZHUmxGVGVGUlJWVVpVVEVkV1FsRlhSWE5STUVaQ1VsTjRURkZWUmtwTVJVNUNVVlZWTjFGVlJrUk9WVWx6VXpCR1FsRjVlR2hSVlVab1RFVldRbEZWYTNOVVZVWkNVMU40UkZGVlJrUlBNRlpDVVROd1EwOHdSa0pSVlVWelVWVkdSbEZUZUZSUlZVWlVURVpPUWxGVk9ITlJNRVpDVVhsNFFsRlZSa1JNUlU1Q1VWVk5OMUZWUmtSaGEwbHpWbFZHUWxSVGVGWlJWVVpXVEVWR1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtSTVJVNUNVVlZqYzFFd1JrSlJVM2hTVVZWR1VFeEZNVUpSVlRCelVUQkdRbEo1ZUVSUlZVWkNURVU1UWxGVk1ITlZNRVpDVlhsNFZGRlZSbFJNUlU1Q1VWVk5jMUV3UmtKUmVuUkdVVlZXYzFKVWRFSlJWVVpDVEVWR1FsSlZSWE5WTUVaQ1ZYbDRkRkZyUmtKaFZVbHpVVEJHUWxKVGVFcFJWVVpJVEVWT1FsRlZZemRSVlVaRVlVVk5jMVF3UmtKU2VYaEdVVlZHU2t4RlRrSlJWVVZ6VTFWR1FsSjVlRkpSVlVaU1RFVkdRbEZWVFhOUk1FWkNVWGw0VGxGVlJreE1SVTVDVVZWamMxUlZSa0pUVTNoRVVWVkdSRXhHUmtKUlZrVnpVVlZHUWxGNWVFUlJWVVpFVEVVeFFsRlZjM05STUVaQ1VubDRUbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlblJDVVZWT05sSkRlRUpSVlVaS1RFVXhRbEZWUlhOUk1FWkNVVk40VEZGVlJrcE1SVlpDVVZWcmMxTlZSa0pUVTNoUVVWVkdURXhGUmtKUlZVMXpVVEJHUWxGNWVGSlJWVVpRVEVWV1FsRlZhM05UTUVaQ1VubDRSRkZWUmtKTVJVNUNVVlZyYzFkVlJrSldVM2hFVVZWR1JFOHdSa0pSTTBKRlRFZE9RbEZWTUhOU1ZVWkNVMU40UkZGVlJrSk1SWFJDVVZWcmMxTXdSa0pUZVhoQ1VWVkdSRXhGVGtKUlZVMXpWREJHUWxSVGVGUlJWVVpVVEVVNVFsRlZPSE5STUVaQ1VYbDRSRkZWUmtSUE1FWkNVWHBrUkV4R1RrSlJWVGh6VVRCR1FsRlRlRkJSVlVaT1RFVnNRbEZWTUhOVE1FWkNVbmw0UkZGVlJrSk1SVTVDVVZWcmMxSXdSa0pSZVhoR1VWVkdTa3hGVGtKUlZVVnpZVEJLUWxGWGJFTk1SVVpDVVZWTmMxRXdSa0pSZVhoUVVWVkdUa3hGVGtKUlZWVnpVVEJHUWxGVGVFUlJWVVpFVEVaR1FsRldSWE5SVlVaQ1VYbDRSRkZWUmtSTVJYUkNVVlZyYzFFd1JrSlNlWGhLVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekJXUWxFeU5VZFBNRVpDVVZWRmMxRlZSa1JTYW5SQ1VWVkdRa2xwZDJsak1qa3hZMjFPYkZWdE9YWmtRMGsyU1drNVZtTXlWbmxqZVRsNVdWZGFhRnBYZUcxYVdFcDFXVmMxYTFwWVRYWlZTRXAyWVcxV2FtUklUWFphYld3d1RGZGFhRmt5Vm1saU1qbHlURE5rTTJSNU9YZGtWMHB6WVZkTmRtSlhPV3RrVjNoc1kzazViVnBwTVdwaU0wcHNUSGxKYzBsdVRuWmtXRXBxV2xoT1JHSXlOVEJhVnpVd1NXcHdZa2x0TVhaYVNGWnpXbE0xYkdWSVFuWmpibEo2U1VRd1oxZDVZMnRqTWs1MlkwZFZia3hEUVc1S1IzaDJXVEpHTUdGWE9YVktlWGRuU2pKYWJWWkhPWEphVnpSdVRFTkJia3BJWkhCaWJWSjJaSGxqYzBsRFkydGpiVGwyWkVaT2FtSXpRbXhLZVhkblNubFNiMlJJVW5kS2VYZG5XbTFhUkdJelNteFJNamwxWkVoS2RtSkhlR3hqYkRCbldFYzFZMkpwT0hGTGJIaDFTVU52WjFWdFZuZGpiVlo2V2xjMU1HTjVRakJoUjFWbldUSTVlVnBUUW1waU1qVXdZMjA1YzJKSFZubE1RMEl6WTIxR2QyTkhiSFZhZVVJd1lVZFZaMWhITkdkTGFVSXpZVWM1YzFwVFFtaGpTRUZuWkVjNFoxbFlUbnBoV0U0d1NVaGtjR1JIWjJkWk1qbDBZbGM1ZFVsSFdteFpXRkl4WTIxV2VreHBRbU5pYVVGeFdFYzBaMHRwUWtGaWJXUnJZakpOWjFwSGJIbGFWMDR3WVZoYWJGaEhOR2RMYVVKQlltMUdkRnBUUW0xYWEwNTJZMjFXUkdJeU5UQmpiVGx6WWtkV2VWaEhOR2RMYVVKQll6SldiRWxIV20xTWJVNTJZMjFXVG1JeVVqRmlSMVpqWW1sQmNVd3hlSFZhYmxaMVdUTlNjR0l5TkdkYWJWcEVZak5LYkZFeU9YVmtTRXAyWWtkNGJHTnBaMnRqTWs1MlkwZFZjMGxEVW5OaU1rNW9aRWRzZG1KcGQyZGFiVnBWWWpKMGJHSnBkMmRLU0dSd1ltMVNkbVI1ZDJkS1NFcDJZak5TVkZreU9YZGFVM2RuU2tkb01HUklRWEJKU0hSalltbEJaMlJ0Um5sSlNGcDBTVVF3WjJSSGFIQmplbk5uV0VjMFowbElXbWhqYVVKcVlqSlNiRTh4ZUhWSlEwSnpZakpHYTFaSE9YSmFWelJ2UzFSMFkySnBRV2RaTW5oc1dWaEtWbU50ZDI5TFZIUmpZbXg0ZFVsRFFtMWtWelZxWkVkc2RtSnBRbk5pTWtaclZrYzVjbHBYTkc5TFdIUmpZbWxCWjBsRFFuQmFhV2RvU2toa2NHSnRVblprZVRWellqSk9hR1JIYkhaaWFUVjZXbGRHZVZreVozQkpTRXBzWkVoV2VXSnFkR05pYVVGblNVTkNZMkpwUVdkSlEwSnFZakpTYkVsRU1HZGFNbFl3VlVkR2VWbFhNV3hrUjFaNVVXNXNUMWxYTVd4TFEyUnFZakpTYkVwNWF6ZFlSelJuU1VOQlowcEhhREJrU0VGMVdqSldNRXREWTNaWldGWXdZVWM1ZVdGWWNHeE1lamxxWWpKU2JGQlRZM0pKUjA1MldrZFZjRmhITkdkSlEwRm5TVU5CWjBsRFFYVmpNMVpxV1RKV2VtTjVhRzVhV0ZKVllqSjBiR0pwYkdOaWFVRm5TVU5CWjBsRFFXZEpRelZzWTI1S2RtTnBhRzFaVjJ4elZrYzVTRnBZVWxWaU1uUnNZbWxyTjFoSE5HZEpTREZqWW14NGRVbERRbTFrVnpWcVpFZHNkbUpwUW01YVdGSlZZakowYkdKcGFHdFpXRkpvUzFoMFkySnBRV2RKUTBJeVlsTTFNR0l5ZEd4aWFVRTVTVU5TZVdJeU9UQlZNazUyWTBkVmRXUkhPWEphVnpSblVGTkNhMWxZVW1oTWJVWnFXVEpXZW1NeE9UQmlNblJzWW1wMFkySnBRV2RtVm5oMVNVTkNZMkpwUVdkYWJsWjFXVE5TY0dJeU5HZGFiVVp3WWtaU2RsSXlWakJXUnpseVdsYzBiMXBZU25saU0wbHdaVEY0ZFVsRFFXZEpTRnAwVEcxV2VXTnRPWGxVVjFaNll6SkdibHBUUVRsSlIxWjVZMjA1ZVU4eGVIVkpRMEk1V0VjMVkySnBRV2RhYmxaMVdUTlNjR0l5TkdkWk1uaHNXVmhLVm1OdGQyOUxXSFJqWW1sQlowbERRbTloV0U0d1lqTktOVXh1UWpGak1taFVaRWRHTUZwVGFHTkpiSGRwVEVOQ2EySXlUakZpVjFaMVpFTTFNR0ZZVW5OYVUzZG5Ta2hrY0dKdFVuWmtlVFZ6WWpKT2FHUkhiSFppYVRWM1dWaFNiMkp0Um5SYVUyczNXRWMwWjBsRFFXZE1lVGhyWkRKc2RWcEhPVE5NYlhoMldUSkdNR0ZYT1hWTWJXaDVXbGRaWjFCVFFXNU1lVTEyU25wMFkySnBRV2RtVm5oMVdFYzBaMGxIV2pGaWJVNHdZVmM1ZFVsSFpHeGtSa0pvWTIxR2RGcFlVbXhqYTBvMVZHMUdkRnBUYUhWWlZ6RnNTMU5DTjFoSE5HZEpRMEZuWW0xR2RGcFRRVGxKUnpWb1lsZFZkV050Vm5kaVIwWnFXbE5uZGxjeGVHTlhNVEIyVEVOQ1kwbHNlR05ZUm5oaVdFTkpjRXh1U214alIzaG9XVEpWYjB3eGRHTllSakZrVEhsM1oxaERTbU5ZUm5oaldGWjNhVXRVZEdOaWFVRm5TVU5DTWxsWVNXZGpiVlp1V2xobloxQlRRblZhV0dOblZXMVdibEpZYUhkTFJuZHBWekY0WTFoR2R5OUtiREZqU1dsQmNrbEhOV2hpVjFWblMzbENZMGxxTUc5WE1UUnRTVEV3Y1V0V2QybExVM2hqWW1sQlowbERRbmxhV0U0eFlraFNla2xFTUdkamJWWnVXbGhuZFZwWWFHeFplV2RyWkRKc2RWcEhPVE5NYlhoMldUSkdNR0ZYT1hWTWJrNXNXVmhLYW1GRGF6ZFlSelJuU1VOQloyTnRWakJrV0VwMVNVaEtiR016Vm5Oa1NFMW5VRlF3T1VsSE5URmlSM2RuVUhsQ1kwbHNkMmxKUkc5bldrZFdhbUl5VW14V1ZrcEtVVEk1ZEdOSE9YVmFWelV3UzBoS2JHTXpWbk5rU0U1aVRWWXdkV050Vm5kaVIwWnFXbE5uZGxoR2QzSk1NbU56U1VaM2FVbEdkMmxMVTJzM1dFYzBaMGxJTVdOaWJqRmpZbWxLWkdaUlBUMWNiaTh2SXlCemIzVnlZMlZWVWt3OUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OXRiMlIxYkdWekwyWm1MV052Y21VdlptWXVZMjl5WlM1amIyNTBjbTlzYkdWeUxtcHpJbDE5XG4vLyMgc291cmNlVVJMPS9Vc2Vycy9yYWZhZWxmZXJuYW5kZXMvUHJvamVjdHMvZml0LWZhY2Vib29rL3d3dy9wdWJsaWMvbW9kdWxlcy9mZi1jb3JlL2ZmLmNvcmUuY29udHJvbGxlci5qcyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5hbmd1bGFyLm1vZHVsZSgnZmYuZGFzaGJvYXJkTW9kdWxlJywgW10pLmNvbmZpZyhyZXF1aXJlKCcuL2ZmLmRhc2hib2FyZC5yb3V0ZXMuanMnKSkuY29udHJvbGxlcignZmZEYXNoYm9hcmRDb250cm9sbGVyJywgcmVxdWlyZSgnLi9mZi5kYXNoYm9hcmQuY29udHJvbGxlci5qcycpKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXUmhjMmhpYjJGeVpDOW1aaTVrWVhOb1ltOWhjbVF1WVhCd0xtcHpJaXdpYzI5MWNtTmxjeUk2V3lJdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyMXZaSFZzWlhNdlptWXRaR0Z6YUdKdllYSmtMMlptTG1SaGMyaGliMkZ5WkM1aGNIQXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkJRU3hYUVVGWExFTkJRVU03UVVGRFdpeE5RVUZOTEU5QlFVOHNRVUZCUXl4RFFVRkRMRzlDUVVGdFFpeERRVUZITEVkQlFVTXNRMEZCUXl4UFFVRlBMRUZCUVVNc1EwRkJReXhQUVVGTkxFRkJRVU1zUTBGQlF5d3dRa0ZCZVVJc1EwRkJReXhEUVVGRExGZEJRVmNzUVVGQlF5eERRVUZETEhWQ1FVRnpRaXhEUVVGSExFTkJRVUVzVDBGQlRTeEJRVUZETEVOQlFVTXNPRUpCUVRaQ0xFTkJRVU1zUTBGQlF5eERRVUZETzBGQlIzQkVJaXdpYzI5MWNtTmxVbTl2ZENJNklpOVZjMlZ5Y3k5eVlXWmhaV3htWlhKdVlXNWtaWE12VUhKdmFtVmpkSE12Wm1sMExXWmhZMlZpYjI5ckwzZDNkeTl3ZFdKc2FXTXZiVzlrZFd4bGN5OW1aaTFrWVhOb1ltOWhjbVF2SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1aGJtZDFiR0Z5TG0xdlpIVnNaU2duWm1ZdVpHRnphR0p2WVhKa1RXOWtkV3hsSnl3Z1cxMHBMbU52Ym1acFp5aHlaWEYxYVhKbEtDY3VMMlptTG1SaGMyaGliMkZ5WkM1eWIzVjBaWE11YW5NbktTa3VZMjl1ZEhKdmJHeGxjaWduWm1aRVlYTm9ZbTloY21SRGIyNTBjbTlzYkdWeUp5d2djbVZ4ZFdseVpTZ25MaTltWmk1a1lYTm9ZbTloY21RdVkyOXVkSEp2Ykd4bGNpNXFjeWNwS1R0Y2JseHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WkdGMFlUcGhjSEJzYVdOaGRHbHZiaTlxYzI5dU8ySmhjMlUyTkN4bGVVb3lXbGhLZW1GWE9YVkphbTk2VEVOS2JXRlhlR3hKYW05cFRERldlbHBZU25wTU0wcG9XbTFHYkdKSFdteGpiVFZvWW0xU2JHTjVPVkZqYlRseFdsZE9NR041T1cxaFdGRjBXbTFHYWxwWFNuWmlNbk4yWkROa00wd3pRakZaYlhod1dYazVkR0l5VWpGaVIxWjZUREphYlV4WFVtaGpNbWhwWWpKR2VWcERPVzFhYVRWcldWaE9iMWx0T1doamJWRjFXVmhDZDB4dGNIcEphWGRwWXpJNU1XTnRUbXhqZVVrMlYzbEpkbFpZVG14amJrMTJZMjFHYlZsWFZuTmFiVlo1WW0xR2RWcEhWbnBNTVVKNVlqSndiRmt6VW5wTU1scHdaRU14YlZsWFRteFpiVGwyWVhrNU0yUXpZM1pqU0ZacFlrZHNha3d5TVhaYVNGWnpXbGhOZGxwdFdYUmFSMFo2WVVkS2RsbFlTbXRNTWxwdFRHMVNhR015YUdsaU1rWjVXa00xYUdOSVFYVmhiazFwV0ZOM2FXSnRSblJhV0UxcFQyeDBaRXhEU25SWldFSjNZVmMxYm1ONVNUWkphMFpDVkZWRk4xRlZSa0pSVTNoT1VWVkdUa3hGT1VKUlZUaHpVVlZHUWxGNWVFUlJWVVpFVEVjNVExRlZSblJSYVhoRVVWVkdTRXhGWkVKUlZVMXpVVEJHUWxGNWVGQlJWVTB6VVdsNFFsRlZSa1JNUlU1Q1VWVk5jMVF3UmtKVVUzaENVVlZHUkV4RlRrSlJWVTF6VFVWS1FsRlliRU5NUlU1Q1VWVk5jMUV3UmtKUmVYaFlVVlZPY1ZGNWVFSlJWVVpFVEVWT1FsRlZUWE5rVlVwQ1VWaE9RMHhGVGtKUlZXTnpVVEJHUWxGVGVGQlJWVVpPVEVWR1FsRlZUWE5STUVaQ1VYbDNORkZyUmtKT2EwbHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZSVGRSVlVaRVlVVlphVXhEU25waU0xWjVXVEpXVTJJeU9UQkphbTlwVERGV2VscFlTbnBNTTBwb1dtMUdiR0pIV214amJUVm9ZbTFTYkdONU9WRmpiVGx4V2xkT01HTjVPVzFoV0ZGMFdtMUdhbHBYU25aaU1uTjJaRE5rTTB3elFqRlpiWGh3V1hrNWRHSXlVakZpUjFaNlRESmFiVXhYVW1oak1taHBZakpHZVZwRE9HbE1RMHA2WWpOV2VWa3lWbnBSTWpsMVpFZFdkV1JEU1RaWGVVbDJTMmx3WTJKcFFYRkpSa3BzWTBoS2JHTXlWblZrU0UxblpFZG9iRWxIVG5aaWJsSm9ZVmMxYkdOcFFtaGpiVlpvU1VkYWRtTnBRakJoUjFWbllsZEdjR0pwUW5kWlYyUnNXRWMwWjB0c2VIVkpRMjluVVVjMWJscEhPV3BKUnpGMldraFdjMXBXZUhWSlEyOW5VVWMxYUdKWFZXZGFiVmwxV2tkR2VtRkhTblpaV0VwclZGYzVhMlJYZUd4SlJuaDFTVU52ZGxoSE5XaGliV1F4WWtkR2VVeHRNWFphU0ZaeldsTm5ibHB0V1hWYVIwWjZZVWRLZGxsWVNtdFVWemxyWkZkNGJFcDVkMmRYTVRCd1dFYzBaMGxEUVdkTWJVNTJZbTFhY0ZwNWFIbGFXRVl4WVZoS2JFdERZM1ZNTWxwdFRHMVNhR015YUdsaU1rWjVXa00xZVdJelZqQmFXRTExWVc1TmJrdFRiR05pYVVGblNVTkJkVmt5T1hWa1NFcDJZa2Q0YkdOcFoyNWFiVnBGV1ZoT2IxbHRPV2hqYlZKRVlqSTFNR050T1hOaVIxWjVTbmwzWjJOdFZuaGtWMng1V2xObmJreHBPVzFhYVRWcldWaE9iMWx0T1doamJWRjFXVEk1ZFdSSVNuWmlSM2hzWTJrMWNXTjVZM0JMVm5oMVNXd3hPVnh1THk4aklITnZkWEpqWlZWU1REMHZWWE5sY25NdmNtRm1ZV1ZzWm1WeWJtRnVaR1Z6TDFCeWIycGxZM1J6TDJacGRDMW1ZV05sWW05dmF5OTNkM2N2Y0hWaWJHbGpMMjF2WkhWc1pYTXZabVl0WkdGemFHSnZZWEprTDJabUxtUmhjMmhpYjJGeVpDNWhjSEF1YW5NaVhYMD1cbi8vIyBzb3VyY2VVUkw9L1VzZXJzL3JhZmFlbGZlcm5hbmRlcy9Qcm9qZWN0cy9maXQtZmFjZWJvb2svd3d3L3B1YmxpYy9tb2R1bGVzL2ZmLWRhc2hib2FyZC9mZi5kYXNoYm9hcmQuYXBwLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gWyckc2NvcGUnLCBmZkRhc2hib2FyZENvbnRyb2xsZXJdO1xuZnVuY3Rpb24gZmZEYXNoYm9hcmRDb250cm9sbGVyKCRzY29wZSkge1xuICB2YXIgdm0gPSB0aGlzO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFdSaGMyaGliMkZ5WkM5bVppNWtZWE5vWW05aGNtUXVZMjl1ZEhKdmJHeGxjaTVxY3lJc0luTnZkWEpqWlhNaU9sc2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFdSaGMyaGliMkZ5WkM5bVppNWtZWE5vWW05aGNtUXVZMjl1ZEhKdmJHeGxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVUZCTEZkQlFWY3NRMEZCUXp0QlFVTmFMRXRCUVVzc1VVRkJVU3hGUVVGSkxFVkJRVU1zVVVGQlR5eERRVUZITEhOQ1FVRnZRaXhEUVVGRExFTkJRVU03UVVGRGJFUXNUMEZCVXl4elFrRkJiMElzUTBGQlJTeE5RVUZMTEVOQlFVYzdRVUZEY2tNc1FVRkJTU3hKUVVGQkxFTkJRVUVzUlVGQlF5eEZRVUZKTEV0QlFVY3NRMEZCUXp0QlFVTm1PMEZCUVVFaUxDSnpiM1Z5WTJWU2IyOTBJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXUmhjMmhpYjJGeVpDOGlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpjSW5WelpTQnpkSEpwWTNSY0lqdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdXeWNrYzJOdmNHVW5MQ0JtWmtSaGMyaGliMkZ5WkVOdmJuUnliMnhzWlhKZE8xeHVablZ1WTNScGIyNGdabVpFWVhOb1ltOWhjbVJEYjI1MGNtOXNiR1Z5S0NSelkyOXdaU2tnZTF4dUlDQjJZWElnZG0wZ1BTQjBhR2x6TzF4dWZWeHVYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybE1NVlo2V2xoS2Vrd3pTbWhhYlVac1lrZGFiR050TldoaWJWSnNZM2s1VVdOdE9YRmFWMDR3WTNrNWJXRllVWFJhYlVacVdsZEtkbUl5YzNaa00yUXpURE5DTVZsdGVIQlplVGwwWWpKU01XSkhWbnBNTWxwdFRGZFNhR015YUdsaU1rWjVXa001YlZwcE5XdFpXRTV2V1cwNWFHTnRVWFZaTWpsMVpFaEtkbUpIZUd4amFUVnhZM2xKYzBsdVRuWmtXRXBxV2xoTmFVOXNjMmxNTVZaNldsaEtla3d6U21oYWJVWnNZa2RhYkdOdE5XaGliVkpzWTNrNVVXTnRPWEZhVjA0d1kzazViV0ZZVVhSYWJVWnFXbGRLZG1JeWMzWmtNMlF6VEROQ01WbHRlSEJaZVRsMFlqSlNNV0pIVm5wTU1scHRURmRTYUdNeWFHbGlNa1o1V2tNNWJWcHBOV3RaV0U1dldXMDVhR050VVhWWk1qbDFaRWhLZG1KSGVHeGphVFZ4WTNsS1pFeERTblZaVnpGc1kzbEpObGN4TUhOSmJURm9ZMGhDY0dKdFpIcEphbTlwVVZWR1FsRlVkRUpSVlVaQ1RFVjBRbEZWYzNOVlZVWkNWVk40UmxGVlJrcE1SVlpDVVZWTmMxVlZSa0pVZVhoRVVWVkdTRXhJVGtOUlZVWjJVV2w0UkZGVlJrUk1SVTVDVVZWRk4xRlZSbEpoYTFGelZEQkdRbFY1ZUhwUmEwWkNZakJKYzFFd1JrSlNVM2hPVVZWR1RFeEZUa0pSVldNM1VWVkdSR05yVFhOUlZVWkNVMU40U2xGVlJrSk1SVTVDVVZWRmMxSlZSa0pSZVhoR1VWVkdTa3hGZEVKUlZXTnpVVEJHUWxGNmRFSlJWVTV0VHpCR1FsRlZSV2xNUTBwNllqTldlVmt5VmxOaU1qa3dTV3B2YVV3eFZucGFXRXA2VEROS2FGcHRSbXhpUjFwc1kyMDFhR0p0VW14amVUbFJZMjA1Y1ZwWFRqQmplVGx0WVZoUmRGcHRSbXBhVjBwMllqSnpkbVF6WkROTU0wSXhXVzE0Y0ZsNU9YUmlNbEl4WWtkV2Vrd3lXbTFNVjFKb1l6Sm9hV0l5Um5sYVF6aHBURU5LZW1JelZubFpNbFo2VVRJNWRXUkhWblZrUTBrMlYzbEtkR0l5VWpGaVIxVjFXbGhvZDJJelNqQmplVUU1U1VaemJrcElUbXBpTTBKc1NubDNaMXB0V2tWWldFNXZXVzA1YUdOdFVrUmlNalV3WTIwNWMySkhWbmxZVTBKallteDRkVXg1YjNGWVJ6Um5TMmxDUkdJeU5UQmpiVGx6WWtoTloyUkhhR3hKUnpGb1lWYzBaMXBIUm5waFIwcDJXVmhLYTBsSFJubGFWMFYxV0VjMFowdHNlSFZKUTI5blVVZE9jMWxZVG5wSlIxcHRVa2RHZW1GSFNuWlpXRXByVVRJNWRXUklTblppUjNoc1kyeDRkVWxEYjJkUlJ6RnNZbGRLYkdOck9XMUpSMXB0VEcxU2FHTXlhR2xpTWtaNVdrVXhkbHBJVm5OYVZuaDFTVU52ZGxoSE5XMWtWelZxWkVkc2RtSnBRbTFhYTFKb1l6Sm9hV0l5Um5sYVJVNTJZbTVTZVdJeWVITmFXRWx2U2toT2FtSXpRbXhMVTBJM1dFYzBaMGxJV21oamFVSXlZbE5CT1VsSVVtOWhXRTAzU1VaNGRXWldlSFZKYkRFNVhHNHZMeU1nYzI5MWNtTmxWVkpNUFM5VmMyVnljeTl5WVdaaFpXeG1aWEp1WVc1a1pYTXZVSEp2YW1WamRITXZabWwwTFdaaFkyVmliMjlyTDNkM2R5OXdkV0pzYVdNdmJXOWtkV3hsY3k5bVppMWtZWE5vWW05aGNtUXZabVl1WkdGemFHSnZZWEprTG1OdmJuUnliMnhzWlhJdWFuTWlYWDA9XG4vLyMgc291cmNlVVJMPS9Vc2Vycy9yYWZhZWxmZXJuYW5kZXMvUHJvamVjdHMvZml0LWZhY2Vib29rL3d3dy9wdWJsaWMvbW9kdWxlcy9mZi1kYXNoYm9hcmQvZmYuZGFzaGJvYXJkLmNvbnRyb2xsZXIuanMiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBbJyRyb3V0ZVByb3ZpZGVyJywgZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpIHtcbiAgJHJvdXRlUHJvdmlkZXIud2hlbignLycsIHtcbiAgICBjb250cm9sbGVyOiAnZmZEYXNoYm9hcmRDb250cm9sbGVyIGFzIHZtJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbW9kdWxlcy9mZi1kYXNoYm9hcmQvZmYuZGFzaGJvYXJkLnRtcGwuaHRtbCdcbiAgfSk7XG59XTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXUmhjMmhpYjJGeVpDOW1aaTVrWVhOb1ltOWhjbVF1Y205MWRHVnpMbXB6SWl3aWMyOTFjbU5sY3lJNld5SXZWWE5sY25NdmNtRm1ZV1ZzWm1WeWJtRnVaR1Z6TDFCeWIycGxZM1J6TDJacGRDMW1ZV05sWW05dmF5OTNkM2N2Y0hWaWJHbGpMMjF2WkhWc1pYTXZabVl0WkdGemFHSnZZWEprTDJabUxtUmhjMmhpYjJGeVpDNXliM1YwWlhNdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGQlFTeFhRVUZYTEVOQlFVTTdRVUZEV2l4TFFVRkxMRkZCUVZFc1JVRkJTU3hGUVVGRExHZENRVUZsTEVOQlFVY3NWVUZCVXl4alFVRmhMRU5CUVVjN1FVRkRNMFFzWlVGQllTeExRVUZMTEVGQlFVTXNRMEZCUXl4SFFVRkZMRU5CUVVjN1FVRkRka0lzWVVGQlV5eERRVUZITERoQ1FVRTBRanRCUVVONFF5eGpRVUZWTEVOQlFVY3NaMFJCUVRoRE8wRkJRVUVzUlVGRE4wUXNRMEZCUXl4RFFVRkRPMEZCUTBvc1EwRkJReXhEUVVGRE8wRkJSemhISWl3aWMyOTFjbU5sVW05dmRDSTZJaTlWYzJWeWN5OXlZV1poWld4bVpYSnVZVzVrWlhNdlVISnZhbVZqZEhNdlptbDBMV1poWTJWaWIyOXJMM2QzZHk5d2RXSnNhV012Ylc5a2RXeGxjeTltWmkxa1lYTm9ZbTloY21Rdklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGc25KSEp2ZFhSbFVISnZkbWxrWlhJbkxDQm1kVzVqZEdsdmJpZ2tjbTkxZEdWUWNtOTJhV1JsY2lrZ2UxeHVJQ0FrY205MWRHVlFjbTkyYVdSbGNpNTNhR1Z1S0Njdkp5d2dlMXh1SUNBZ0lHTnZiblJ5YjJ4c1pYSTZJQ2RtWmtSaGMyaGliMkZ5WkVOdmJuUnliMnhzWlhJZ1lYTWdkbTBuTEZ4dUlDQWdJSFJsYlhCc1lYUmxWWEpzT2lBbkxpOXRiMlIxYkdWekwyWm1MV1JoYzJoaWIyRnlaQzltWmk1a1lYTm9ZbTloY21RdWRHMXdiQzVvZEcxc0oxeHVJQ0I5S1R0Y2JuMWRPMXh1WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWtZWFJoT21Gd2NHeHBZMkYwYVc5dUwycHpiMjQ3WW1GelpUWTBMR1Y1U2pKYVdFcDZZVmM1ZFVscWIzcE1RMHB0WVZkNGJFbHFiMmxNTVZaNldsaEtla3d6U21oYWJVWnNZa2RhYkdOdE5XaGliVkpzWTNrNVVXTnRPWEZhVjA0d1kzazViV0ZZVVhSYWJVWnFXbGRLZG1JeWMzWmtNMlF6VEROQ01WbHRlSEJaZVRsMFlqSlNNV0pIVm5wTU1scHRURmRTYUdNeWFHbGlNa1o1V2tNNWJWcHBOV3RaV0U1dldXMDVhR050VVhWamJUa3haRWRXZWt4dGNIcEphWGRwWXpJNU1XTnRUbXhqZVVrMlYzbEpkbFpZVG14amJrMTJZMjFHYlZsWFZuTmFiVlo1WW0xR2RWcEhWbnBNTVVKNVlqSndiRmt6VW5wTU1scHdaRU14YlZsWFRteFpiVGwyWVhrNU0yUXpZM1pqU0ZacFlrZHNha3d5TVhaYVNGWnpXbGhOZGxwdFdYUmFSMFo2WVVkS2RsbFlTbXRNTWxwdFRHMVNhR015YUdsaU1rWjVXa00xZVdJelZqQmFXRTExWVc1TmFWaFRkMmxpYlVaMFdsaE5hVTlzZEdSTVEwcDBXVmhDZDJGWE5XNWplVWsyU1d0R1FsWlZSVGRSVlVaQ1VWTjRURkZWUmt4TVJrWkNVVlpGYzFKVlJrSlRVM2hHVVZWR1JFeEhaRU5SVlVac1RFVk9RbEZWWTNOV1ZVWkNWWGw0YWxGVlJtaE1SVTVDVVZWak4xRlZSa1JOTUZGeldsVkdRbGxUZUV4UlZVWk1URVZHUWxGVlRYTlJNRVpDVVhsNFNGRlZSa1pNUlU1Q1VWVmpOMUZWUmtSa2EwbHpXVlZHUWxWNWVFUlJWVVpLVEVSb1ExRlZSVEJSYW5SQ1VWVk9ObEY1ZUdwUlZVWldURVZPUWxGVmEzTmFNRkpDVVZSb1JFOHdSa0pSVlVWelVsVkdSRTlWVVhOUk1FWkNVWGw0UkZGVlJrUlBNRVpDVVRCdmMxRXdSa0pSZVhoRVVWVkdRazh3UmtKUk1GRnBURU5LZW1JelZubFpNbFpUWWpJNU1FbHFiMmxNTVZaNldsaEtla3d6U21oYWJVWnNZa2RhYkdOdE5XaGliVkpzWTNrNVVXTnRPWEZhVjA0d1kzazViV0ZZVVhSYWJVWnFXbGRLZG1JeWMzWmtNMlF6VEROQ01WbHRlSEJaZVRsMFlqSlNNV0pIVm5wTU1scHRURmRTYUdNeWFHbGlNa1o1V2tNNGFVeERTbnBpTTFaNVdUSldlbEV5T1hWa1IxWjFaRU5KTmxkNVNYWkxhWEJqWW1sQmNVbEdTblprV0ZKc1kzbENiV0l6U1dka1IyaHNTVWRTYUdNeWFHbGlNa1o1V2tOQ1kySnBRWEZZUnpSblMybENRVmt5ZUdoak0wMW5XbTFhUlZsWVRtOVpiVGxvWTIxU1UySXpWakJhV0U1alltbEJjVWxGUW5SYVZ6RnBXbGhLVUZwcFFtMWFhVFZyV1ZoT2IxbHRPV2hqYlZKT1lqSlNNV0pIVm1OaWFVRnhTVVZDYkdWSFJuUmpSM2hzV0VjMFowdHBRWFpNZVVJeFkyMTNaMUJUUVc1aFNGSXdZMFJ2ZGt3eU1UVmtNbFpwWXpKc01GcFROV3BpTWpCMlNYazRibGhITkdkTGFVRjJUSGxDZW1GSE9URmlSMUZuWWtjNWFGcERRakJoUjFWbldrZEdlbUZIU25aWldFcHJTVWRPZG1KdVVubGlNbmh6V2xoSloxbFhOV3RKU0ZKc1lsaENjMWxZVW14WVJ6Um5TMng0ZFVsRGIzWllSelYwWWpKU01XSkhWWFZhV0doM1lqTktNR041UVRsSlJuTnVTa2hLZG1SWVVteFZTRXAyWkcxc2ExcFlTVzVNUTBKdFpGYzFhbVJIYkhaaWFXZHJZMjA1TVdSSFZsRmpiVGt5WVZkU2JHTnBhMmRsTVhoMVNVTkJhMk50T1RGa1IxWlJZMjA1TW1GWFVteGphVFV6WVVkV2RVdERZM1pLZVhkblpURjRkVWxEUVdkSlIwNTJZbTVTZVdJeWVITmFXRWxuVDJsQmJscHRXa1ZaV0U1dldXMDVhR050VWtSaU1qVXdZMjA1YzJKSFZubEpSMFo2U1VoYWRFcDVlR05pYVVGblNVTkNNRnBYTVhkaVIwWXdXbFpXZVdKRFFUWkpRMk4xVERJeGRscElWbk5hV0UxMldtMVpkRnBIUm5waFIwcDJXVmhLYTB3eVdtMU1iVkpvWXpKb2FXSXlSbmxhUXpVd1lsaENjMHh0YURCaVYzZHVXRWMwWjBsSU1IQlBNWGgxWmxZeFkySnBTbVJtVVQwOVhHNHZMeU1nYzI5MWNtTmxWVkpNUFM5VmMyVnljeTl5WVdaaFpXeG1aWEp1WVc1a1pYTXZVSEp2YW1WamRITXZabWwwTFdaaFkyVmliMjlyTDNkM2R5OXdkV0pzYVdNdmJXOWtkV3hsY3k5bVppMWtZWE5vWW05aGNtUXZabVl1WkdGemFHSnZZWEprTG5KdmRYUmxjeTVxY3lKZGZRPT1cbi8vIyBzb3VyY2VVUkw9L1VzZXJzL3JhZmFlbGZlcm5hbmRlcy9Qcm9qZWN0cy9maXQtZmFjZWJvb2svd3d3L3B1YmxpYy9tb2R1bGVzL2ZmLWRhc2hib2FyZC9mZi5kYXNoYm9hcmQucm91dGVzLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBmcmllbmRDb250cm9sbGVyID0gcmVxdWlyZSgnLi9mZi5mcmllbmQuY29udHJvbGxlci5qcycpO1xudmFyIGZyaWVuZFNlcnZpY2UgPSByZXF1aXJlKCcuL2ZmLmZyaWVuZC5zZXJ2aWNlLmpzJyk7XG5hbmd1bGFyLm1vZHVsZSgnZmYuZnJpZW5kTW9kdWxlJywgW10pLmNvbmZpZyhyZXF1aXJlKCcuL2ZmLmZyaWVuZC5yb3V0ZXMuanMnKSkuZmFjdG9yeShmcmllbmRTZXJ2aWNlLm5hbWUsIGZyaWVuZFNlcnZpY2Uuc2VydmljZSkuY29udHJvbGxlcihmcmllbmRDb250cm9sbGVyLm5hbWUsIGZyaWVuZENvbnRyb2xsZXIuY29udHJvbGxlcik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OXRiMlIxYkdWekwyWm1MV1p5YVdWdVpDOW1aaTVtY21sbGJtUXVZWEJ3TG1weklpd2ljMjkxY21ObGN5STZXeUl2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDIxdlpIVnNaWE12Wm1ZdFpuSnBaVzVrTDJabUxtWnlhV1Z1WkM1aGNIQXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkJRU3hYUVVGWExFTkJRVU03UVVGRFdpeEJRVUZKTEVWQlFVRXNRMEZCUVN4blFrRkJaU3hGUVVGSkxFTkJRVUVzVDBGQlRTeEJRVUZETEVOQlFVTXNNa0pCUVRCQ0xFTkJRVU1zUTBGQlF6dEJRVU16UkN4QlFVRkpMRVZCUVVFc1EwRkJRU3hoUVVGWkxFVkJRVWtzUTBGQlFTeFBRVUZOTEVGQlFVTXNRMEZCUXl4M1FrRkJkVUlzUTBGQlF5eERRVUZETzBGQlEzSkVMRTFCUVUwc1QwRkJUeXhCUVVGRExFTkJRVU1zYVVKQlFXZENMRU5CUVVjc1IwRkJReXhEUVVGRExFOUJRVThzUVVGQlF5eERRVUZETEU5QlFVMHNRVUZCUXl4RFFVRkRMSFZDUVVGelFpeERRVUZETEVOQlFVTXNVVUZCVVN4QlFVRkRMRU5CUVVNc1lVRkJXU3hMUVVGTExFTkJRVWNzUTBGQlFTeGhRVUZaTEZGQlFWRXNRMEZCUXl4WFFVRlhMRUZCUVVNc1EwRkJReXhuUWtGQlpTeExRVUZMTEVOQlFVY3NRMEZCUVN4blFrRkJaU3hYUVVGWExFTkJRVU1zUTBGQlF6dEJRVWQ2UmlJc0luTnZkWEpqWlZKdmIzUWlPaUl2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDIxdlpIVnNaWE12Wm1ZdFpuSnBaVzVrTHlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklsd2lkWE5sSUhOMGNtbGpkRndpTzF4dWRtRnlJR1p5YVdWdVpFTnZiblJ5YjJ4c1pYSWdQU0J5WlhGMWFYSmxLQ2N1TDJabUxtWnlhV1Z1WkM1amIyNTBjbTlzYkdWeUxtcHpKeWs3WEc1MllYSWdabkpwWlc1a1UyVnlkbWxqWlNBOUlISmxjWFZwY21Vb0p5NHZabVl1Wm5KcFpXNWtMbk5sY25acFkyVXVhbk1uS1R0Y2JtRnVaM1ZzWVhJdWJXOWtkV3hsS0NkbVppNW1jbWxsYm1STmIyUjFiR1VuTENCYlhTa3VZMjl1Wm1sbktISmxjWFZwY21Vb0p5NHZabVl1Wm5KcFpXNWtMbkp2ZFhSbGN5NXFjeWNwS1M1bVlXTjBiM0o1S0daeWFXVnVaRk5sY25acFkyVXVibUZ0WlN3Z1puSnBaVzVrVTJWeWRtbGpaUzV6WlhKMmFXTmxLUzVqYjI1MGNtOXNiR1Z5S0daeWFXVnVaRU52Ym5SeWIyeHNaWEl1Ym1GdFpTd2dabkpwWlc1a1EyOXVkSEp2Ykd4bGNpNWpiMjUwY205c2JHVnlLVHRjYmx4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LYldGWGVHeEphbTlwVERGV2VscFlTbnBNTTBwb1dtMUdiR0pIV214amJUVm9ZbTFTYkdONU9WRmpiVGx4V2xkT01HTjVPVzFoV0ZGMFdtMUdhbHBYU25aaU1uTjJaRE5rTTB3elFqRlpiWGh3V1hrNWRHSXlVakZpUjFaNlRESmFiVXhYV25saFYxWjFXa001YlZwcE5XMWpiV3hzWW0xUmRWbFlRbmRNYlhCNlNXbDNhV015T1RGamJVNXNZM2xKTmxkNVNYWldXRTVzWTI1TmRtTnRSbTFaVjFaeldtMVdlV0p0Um5WYVIxWjZUREZDZVdJeWNHeFpNMUo2VERKYWNHUkRNVzFaVjA1c1dXMDVkbUY1T1ROa00yTjJZMGhXYVdKSGJHcE1NakYyV2toV2MxcFlUWFphYlZsMFdtNUtjRnBYTld0TU1scHRURzFhZVdGWFZuVmFRelZvWTBoQmRXRnVUV2xZVTNkcFltMUdkRnBZVFdsUGJIUmtURU5LZEZsWVFuZGhWelZ1WTNsSk5rbHJSa0pSVlVVM1VWVkdRbEZUZUVKUlZVWktURVZXUWxGVlJYTlJNRVpDVVZONGJsRnJSa0phVTNoR1VWVkdTa3hGVGtKUlZVVnpWREJHUWxSVGVFSlJWVVpFVEVWT1FsRlZUWE5OYTBwQ1VWUkNRMHhGVGtKUlZVMXpVVEJHUWxGNmRFSlJWVTE2VWtONFFsRlZSa3BNUlZaQ1VWVkZjMUV3UmtKUlUzaG9VVlZHV2t4RlZrSlJWV3R6VVRCR1FsRlRlRkJSVlVaT1RFVkdRbEZWVFhOUk1FWkNVWGw0TTFGclJrSmtWVWx6VVRCR1FsRjVlRVJSVlVaRVR6QkdRbFZZU2tWTVJURkNVVlV3YzFRd1JrSlVlWGhDVVZWR1JFeEZUa0pSVlUxellWVktRbEZYWkVOTVJVNUNVVlZqYzFJd1JrSlJlWGhFVVZWR1JFeEZPVUpSZWtaRFRFVkdRbEZWVFhOUk1FWkNVWGw0VUZGVlJrNU1SVVpDVVZWTmMxRXdSa0pSZVhneFVXdEdRbU13U1hOUk1FWkNVWGw0UkZGVlJrUk1Sa1pDVVRKd1JFeEZSa0pSVlUxelVUQkdRbEY1ZUdoUlZVWmFURVYwUWxGVmMzTlJNRVpDVW5sNFJGRlZSa0pNUjBaQ1VWWnJjMVZWUmtKVlUzaEVVVlZHUkV4R1pFSlJNMmhFVEVWR1FsRlZUWE5STUVaQ1VYbDRibEZyUmtKYVUzaE1VVlZHVEV4RlRrSlJWV056VVRCR1FsRlRlRzVSYTBaQ1dsTjRXRkZWUmxoTVJVNUNVVlZOYzFFd1JrSlJWSFJDVVZWT2MxSlRTWE5KYms1MlpGaEthbHBXU25aaU0xRnBUMmxKZGxaWVRteGpiazEyWTIxR2JWbFhWbk5hYlZaNVltMUdkVnBIVm5wTU1VSjVZakp3YkZrelVucE1NbHB3WkVNeGJWbFhUbXhaYlRsMllYazVNMlF6WTNaalNGWnBZa2RzYWt3eU1YWmFTRlp6V2xoTmRscHRXWFJhYmtwd1dsYzFhMHg1U1hOSmJrNTJaRmhLYWxwWVRrUmlNalV3V2xjMU1FbHFjR0pKYmxwb1kybENiV050Ykd4aWJWSkVZakkxTUdOdE9YTmlSMVo1U1VRd1oyTnRWbmhrVjJ4NVdsTm5ia3hwT1cxYWFUVnRZMjFzYkdKdFVYVlpNamwxWkVoS2RtSkhlR3hqYVRWeFkzbGpjRTh4ZUhWa2JVWjVTVWRhZVdGWFZuVmFSazVzWTI1YWNGa3lWV2RRVTBKNVdsaEdNV0ZZU214TFEyTjFUREphYlV4dFdubGhWMVoxV2tNMWVscFlTakpoVjA1c1RHMXdla3A1YXpkWVJ6VmpZbWs0Y1V0c2VIVkpRMjluVlcxV2VtTkhPWFZqTW14cFlrZFZaMXB0T1hsSlIxcDVZVmRXZFZwSVRXZGhWelZ0WWpOS2RGbFlVbkJpTWpSbldWYzFhMGxJU214alNFcHNZekpXZFdSSFJqQmhWemwxV0VjMFowdHNlSFZKUTI5blVVYzFibHBIT1dwSlJ6RjJXa2hXYzFwV2VIVkpRMjluVVVjMWFHSlhWV2RhYlZsMVdtNUtjRnBYTld0VVZ6bHJaRmQ0YkVsR2VIVkpRMjkyV0VjMWFHSnRaREZpUjBaNVRHMHhkbHBJVm5OYVUyZHVXbTFaZFZwdVNuQmFWelZyVkZjNWEyUlhlR3hLZVhkblZ6RXdjRmhITkdkSlEwRm5URzFPZG1KdFduQmFlV2g1V2xoR01XRllTbXhMUTJOMVRESmFiVXh0V25saFYxWjFXa00xZVdJelZqQmFXRTExWVc1TmJrdFRiR05pYVVGblNVTkJkVnB0Um1wa1J6bDVaVk5vYldOdGJHeGliVkpVV2xoS01tRlhUbXhNYlRWb1lsZFZjMGxIV25saFYxWjFXa1pPYkdOdVduQlpNbFYxWXpKV2VXUnRiR3BhVTJ4alltbEJaMGxEUVhWWk1qbDFaRWhLZG1KSGVHeGphV2h0WTIxc2JHSnRVa1JpTWpVd1kyMDVjMkpIVm5sTWJUVm9ZbGRWYzBsSFdubGhWMVoxV2tWT2RtSnVVbmxpTW5oeldsaEpkVmt5T1hWa1NFcDJZa2Q0YkdOcGJHTmlhVXBrWmxFOVBWeHVMeThqSUhOdmRYSmpaVlZTVEQwdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyMXZaSFZzWlhNdlptWXRabkpwWlc1a0wyWm1MbVp5YVdWdVpDNWhjSEF1YW5NaVhYMD1cbi8vIyBzb3VyY2VVUkw9L1VzZXJzL3JhZmFlbGZlcm5hbmRlcy9Qcm9qZWN0cy9maXQtZmFjZWJvb2svd3d3L3B1YmxpYy9tb2R1bGVzL2ZmLWZyaWVuZC9mZi5mcmllbmQuYXBwLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBjb250cm9sbGVyOiBbJyRzY29wZScsICdmZkZyaWVuZFNlcnZpY2UnLCBmZkZyaWVuZENvbnRyb2xsZXJdLFxuICBuYW1lOiAnZmZGcmllbmRDb250cm9sbGVyJ1xufTtcbmZ1bmN0aW9uIGZmRnJpZW5kQ29udHJvbGxlcigkc2NvcGUsIGZmRnJpZW5kU2VydmljZSkge1xuICB2YXIgdm0gPSB0aGlzO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFdaeWFXVnVaQzltWmk1bWNtbGxibVF1WTI5dWRISnZiR3hsY2k1cWN5SXNJbk52ZFhKalpYTWlPbHNpTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXWnlhV1Z1WkM5bVppNW1jbWxsYm1RdVkyOXVkSEp2Ykd4bGNpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVRkJMRmRCUVZjc1EwRkJRenRCUVVOYUxFdEJRVXNzVVVGQlVTeEZRVUZKTzBGQlEyWXNWMEZCVXl4RFFVRkhMRVZCUVVNc1VVRkJUeXhEUVVGSExHdENRVUZuUWl4RFFVRkhMRzFDUVVGcFFpeERRVUZETzBGQlF6VkVMRXRCUVVjc1EwRkJSeXh4UWtGQmJVSTdRVUZCUVN4QlFVTXpRaXhEUVVGRE8wRkJRMFFzVDBGQlV5eHRRa0ZCYVVJc1EwRkJSU3hOUVVGTExFTkJRVWNzUTBGQlFTeGxRVUZqTEVOQlFVYzdRVUZEYmtRc1FVRkJTU3hKUVVGQkxFTkJRVUVzUlVGQlF5eEZRVUZKTEV0QlFVY3NRMEZCUXp0QlFVTm1PMEZCUVVFaUxDSnpiM1Z5WTJWU2IyOTBJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXWnlhV1Z1WkM4aUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmNJblZ6WlNCemRISnBZM1JjSWp0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0JqYjI1MGNtOXNiR1Z5T2lCYkp5UnpZMjl3WlNjc0lDZG1aa1p5YVdWdVpGTmxjblpwWTJVbkxDQm1aa1p5YVdWdVpFTnZiblJ5YjJ4c1pYSmRMRnh1SUNCdVlXMWxPaUFuWm1aR2NtbGxibVJEYjI1MGNtOXNiR1Z5SjF4dWZUdGNibVoxYm1OMGFXOXVJR1ptUm5KcFpXNWtRMjl1ZEhKdmJHeGxjaWdrYzJOdmNHVXNJR1ptUm5KcFpXNWtVMlZ5ZG1salpTa2dlMXh1SUNCMllYSWdkbTBnUFNCMGFHbHpPMXh1ZlZ4dVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFrWVhSaE9tRndjR3hwWTJGMGFXOXVMMnB6YjI0N1ltRnpaVFkwTEdWNVNqSmFXRXA2WVZjNWRVbHFiM3BNUTBwdFlWZDRiRWxxYjJsTU1WWjZXbGhLZWt3elNtaGFiVVpzWWtkYWJHTnROV2hpYlZKc1kzazVVV050T1hGYVYwNHdZM2s1YldGWVVYUmFiVVpxV2xkS2RtSXljM1prTTJRelRETkNNVmx0ZUhCWmVUbDBZakpTTVdKSFZucE1NbHB0VEZkYWVXRlhWblZhUXpsdFdtazFiV050Ykd4aWJWRjFXVEk1ZFdSSVNuWmlSM2hzWTJrMWNXTjVTWE5KYms1MlpGaEthbHBZVFdsUGJITnBUREZXZWxwWVNucE1NMHBvV20xR2JHSkhXbXhqYlRWb1ltMVNiR041T1ZGamJUbHhXbGRPTUdONU9XMWhXRkYwV20xR2FscFhTblppTW5OMlpETmtNMHd6UWpGWmJYaHdXWGs1ZEdJeVVqRmlSMVo2VERKYWJVeFhXbmxoVjFaMVdrTTViVnBwTlcxamJXeHNZbTFSZFZreU9YVmtTRXAyWWtkNGJHTnBOWEZqZVVwa1RFTktkVmxYTVd4amVVazJWekV3YzBsdE1XaGpTRUp3WW0xa2VrbHFiMmxSVlVaQ1VWUjBRbEZWUmtKTVJYUkNVVlZ6YzFWVlJrSlZVM2hHVVZWR1NFOHdSa0pSTWxGelZqQkdRbFY1ZUVSUlZVWkdURVZXUWxGVlRYTlZWVVpDVkhsNFJGRlZSa2hNUjNSRFVWVkdibEZwZUVSUlZVWklURWN4UTFGVlJuQlJhWGhFVVZWR1JFOHdSa0pSZWs1RlRFVjBRbEZWWTNOUk1FWkNVbmw0ZUZGclJrSmlWVWszVVZWR1FsRlRlRUpSVlUxNlVXbDRSRkZWUmtKUE1FWkNWVlZGYzFRd1JrSlZlWGgwVVd0R1FtRlZTWE5STUVaQ1VsTjRUbEZWUmt4TVJVNUNVVlZqYzFFd1JrSlJVM2hzVVZWR2FreEZUa0pSVldNM1VWVkdSR0pyVVhOUlZVWkNVMU40U2xGVlJrSk1SVTVDVVZWRmMxSlZSa0pSZVhoR1VWVkdTa3hGZEVKUlZXTnpVVEJHUWxGNmRFSlJWVTV0VHpCR1FsRlZSV2xNUTBwNllqTldlVmt5VmxOaU1qa3dTV3B2YVV3eFZucGFXRXA2VEROS2FGcHRSbXhpUjFwc1kyMDFhR0p0VW14amVUbFJZMjA1Y1ZwWFRqQmplVGx0WVZoUmRGcHRSbXBhVjBwMllqSnpkbVF6WkROTU0wSXhXVzE0Y0ZsNU9YUmlNbEl4WWtkV2Vrd3lXbTFNVjFwNVlWZFdkVnBET0dsTVEwcDZZak5XZVZreVZucFJNamwxWkVkV2RXUkRTVFpYZVVwMFlqSlNNV0pIVlhWYVdHaDNZak5LTUdONVFUbGxNWGgxU1VOQ2FtSXlOVEJqYlRsellrZFdlVTlzYzI1S1NFNXFZak5DYkVwNWQyZEtNbHB0VW01S2NGcFhOV3RWTWxaNVpHMXNhbHBUWTNOSlIxcHRVbTVLY0ZwWE5XdFJNamwxWkVoS2RtSkhlR3hqYkRCeldFYzBaMGxITldoaVYxVTJTVU5rYlZwcldubGhWMVoxV2tWT2RtSnVVbmxpTW5oeldsaEpibGhITlRsWVJ6VmpZbWs0Y1V0c2VIVkpRMjluVVRJNWRXUklTblppUjNoNlNVaFNiMXBUUW5SWlYyeDFTVWRTYUdNeWFHbGlNa1o1V2tOQ2FHTnRWbWhNYkhoMVNVTndZMkpwUVhGSlJVSnFZa2RHZW1ONVFtMWFhMXA1WVZkV2RWcEZUblppYmxKNVlqSjRjMXBZU21OaWFVRnhTVVZDZEZwWE1XbGFXRXBRV21sQ2JWcHBOVzFqYld4c1ltMVNUbUl5VWpGaVIxWmpZbWxCY1V3eGVIVmFibFoxV1ROU2NHSXlOR2RhYlZwSFkyMXNiR0p0VWtSaU1qVXdZMjA1YzJKSFZubExRMUo2V1RJNWQxcFRkMmRhYlZwSFkyMXNiR0p0VWxSYVdFb3lZVmRPYkV0VFFqZFlSelJuU1VoYWFHTnBRakppVTBFNVNVaFNiMkZZVFRkSlJuaDFabFo0ZFVsc01UbGNiaTh2SXlCemIzVnlZMlZWVWt3OUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OXRiMlIxYkdWekwyWm1MV1p5YVdWdVpDOW1aaTVtY21sbGJtUXVZMjl1ZEhKdmJHeGxjaTVxY3lKZGZRPT1cbi8vIyBzb3VyY2VVUkw9L1VzZXJzL3JhZmFlbGZlcm5hbmRlcy9Qcm9qZWN0cy9maXQtZmFjZWJvb2svd3d3L3B1YmxpYy9tb2R1bGVzL2ZmLWZyaWVuZC9mZi5mcmllbmQuY29udHJvbGxlci5qcyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFsnJHJvdXRlUHJvdmlkZXInLCBmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xuICAkcm91dGVQcm92aWRlci53aGVuKCcvZnJpZW5kcycsIHtcbiAgICBjb250cm9sbGVyOiAnZmZGcmllbmRDb250cm9sbGVyIGFzIHZtJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbW9kdWxlcy9mZi1mcmllbmQvZmYuZnJpZW5kLnRtcGwuaHRtbCdcbiAgfSk7XG59XTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXWnlhV1Z1WkM5bVppNW1jbWxsYm1RdWNtOTFkR1Z6TG1weklpd2ljMjkxY21ObGN5STZXeUl2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDIxdlpIVnNaWE12Wm1ZdFpuSnBaVzVrTDJabUxtWnlhV1Z1WkM1eWIzVjBaWE11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZCUVN4WFFVRlhMRU5CUVVNN1FVRkRXaXhMUVVGTExGRkJRVkVzUlVGQlNTeEZRVUZETEdkQ1FVRmxMRU5CUVVjc1ZVRkJVeXhqUVVGaExFTkJRVWM3UVVGRE0wUXNaVUZCWVN4TFFVRkxMRUZCUVVNc1EwRkJReXhWUVVGVExFTkJRVWM3UVVGRE9VSXNZVUZCVXl4RFFVRkhMREpDUVVGNVFqdEJRVU55UXl4alFVRlZMRU5CUVVjc01FTkJRWGRETzBGQlFVRXNSVUZEZGtRc1EwRkJReXhEUVVGRE8wRkJRMG9zUTBGQlF5eERRVUZETzBGQlIzZEhJaXdpYzI5MWNtTmxVbTl2ZENJNklpOVZjMlZ5Y3k5eVlXWmhaV3htWlhKdVlXNWtaWE12VUhKdmFtVmpkSE12Wm1sMExXWmhZMlZpYjI5ckwzZDNkeTl3ZFdKc2FXTXZiVzlrZFd4bGN5OW1aaTFtY21sbGJtUXZJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRnNuSkhKdmRYUmxVSEp2ZG1sa1pYSW5MQ0JtZFc1amRHbHZiaWdrY205MWRHVlFjbTkyYVdSbGNpa2dlMXh1SUNBa2NtOTFkR1ZRY205MmFXUmxjaTUzYUdWdUtDY3ZabkpwWlc1a2N5Y3NJSHRjYmlBZ0lDQmpiMjUwY205c2JHVnlPaUFuWm1aR2NtbGxibVJEYjI1MGNtOXNiR1Z5SUdGeklIWnRKeXhjYmlBZ0lDQjBaVzF3YkdGMFpWVnliRG9nSnk0dmJXOWtkV3hsY3k5bVppMW1jbWxsYm1RdlptWXVabkpwWlc1a0xuUnRjR3d1YUhSdGJDZGNiaUFnZlNrN1hHNTlYVHRjYmx4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LYldGWGVHeEphbTlwVERGV2VscFlTbnBNTTBwb1dtMUdiR0pIV214amJUVm9ZbTFTYkdONU9WRmpiVGx4V2xkT01HTjVPVzFoV0ZGMFdtMUdhbHBYU25aaU1uTjJaRE5rTTB3elFqRlpiWGh3V1hrNWRHSXlVakZpUjFaNlRESmFiVXhYV25saFYxWjFXa001YlZwcE5XMWpiV3hzWW0xUmRXTnRPVEZrUjFaNlRHMXdla2xwZDJsak1qa3hZMjFPYkdONVNUWlhlVWwyVmxoT2JHTnVUWFpqYlVadFdWZFdjMXB0Vm5saWJVWjFXa2RXZWt3eFFubGlNbkJzV1ROU2Vrd3lXbkJrUXpGdFdWZE9iRmx0T1haaGVUa3paRE5qZG1OSVZtbGlSMnhxVERJeGRscElWbk5hV0UxMldtMVpkRnB1U25CYVZ6VnJUREphYlV4dFdubGhWMVoxV2tNMWVXSXpWakJhV0UxMVlXNU5hVmhUZDJsaWJVWjBXbGhOYVU5c2RHUk1RMHAwV1ZoQ2QyRlhOVzVqZVVrMlNXdEdRbFpWUlRkUlZVWkNVVk40VEZGVlJreE1Sa1pDVVZaRmMxSlZSa0pUVTNoR1VWVkdSRXhIWkVOUlZVWnNURVZPUWxGVlkzTldWVVpDVlhsNGFsRlZSbWhNUlU1Q1VWVmpOMUZWUmtSTk1GRnpXbFZHUWxsVGVFeFJWVVpNVEVWR1FsRlZUWE5STUVaQ1VYbDRWbEZWUmxSTVJVNUNVVlZqTjFGVlJrUlBWVWx6V1ZWR1FsVjVlRVJSVlVaS1RFUktRMUZWUmpWUmFuUkNVVlZPTUZGNWVHcFJWVVpXVEVWT1FsRlZhM05OUlU1Q1VWaGtSRTh3UmtKUlZVVnpVbFZHUkdWRlVYTlJNRVpDVVhsNFJGRlZSa1JQTUVaQ1VUQnZjMUV3UmtKUmVYaEVVVlZHUWs4d1JrSlJNRkZwVEVOS2VtSXpWbmxaTWxaVFlqSTVNRWxxYjJsTU1WWjZXbGhLZWt3elNtaGFiVVpzWWtkYWJHTnROV2hpYlZKc1kzazVVV050T1hGYVYwNHdZM2s1YldGWVVYUmFiVVpxV2xkS2RtSXljM1prTTJRelRETkNNVmx0ZUhCWmVUbDBZakpTTVdKSFZucE1NbHB0VEZkYWVXRlhWblZhUXpocFRFTktlbUl6Vm5sWk1sWjZVVEk1ZFdSSFZuVmtRMGsyVjNsSmRrdHBjR05pYVVGeFNVWktkbVJZVW14amVVSXdZbmxDYm1KNVFqQmllVUp0WTIxc2JHSnRVbnBKUm5oMVNVTndZMkpwUVhGSlJVSnFZa2RHZW1ONVFtMWFhMXA1WVZkV2RWcEdTblprV0ZKc1l6RjRkVWxEYjJkUlJ6RnNZbGRLYkdOck9XMUpSMXB0VEcxU2FHTXlhR2xpTWtaNVdrVXhkbHBJVm5OYVZuaDFTVU52WjFGSFZqUlpWekYzWWtkV1kySnBRWEZKUXpoMlNVaFdlV0pEUVRsSlEyUnZaRWhTZDA5cE9IWmlXR3d6V2xkS2VtRllVbXhNYlU1MllsTTRha3d5V25saFYxWjFXa2hOYmxoSE5HZExhVUYyVEhsQ2VtRkhPVEZpUjFGbllrYzVhRnBEUWpCaFIxVm5XbTVLY0ZwWE5XdGplVUpxWWpJMU1HTnRPWE5pUjFaNVNVZEdkVnBEUWpCaFIxVm5aRWRXZEdOSGVHaGtSMVpqWW1sQmNWaEhOR2RMYVRsalltMHhkbHBJVm5OYVV6VnNaVWhDZG1OdVVucEpSREJuVjNsamEyTnRPVEZrUjFaUlkyMDVNbUZYVW14amFXTnpTVWRhTVdKdFRqQmhWemwxUzBOU2VXSXpWakJhVmtKNVlqTmFjRnBIVm5sTFUwSTNXRWMwWjBsRFVubGlNMVl3V2xaQ2VXSXpXbkJhUjFaNVRHNWtiMXBYTkc5S2VUbHRZMjFzYkdKdFVucEtlWGRuWlRGNGRVbERRV2RKUjA1MlltNVNlV0l5ZUhOYVdFbG5UMmxCYmxwdFdrZGpiV3hzWW0xU1JHSXlOVEJqYlRsellrZFdlVWxIUm5wSlNGcDBTbmw0WTJKcFFXZEpRMEl3V2xjeGQySkhSakJhVmxaNVlrTkJOa2xEWTNWTU1qRjJXa2hXYzFwWVRYWmFiVmwwV201S2NGcFhOV3RNTWxwdFRHMWFlV0ZYVm5WYVF6VXdZbGhDYzB4dGFEQmlWM2R1V0VjMFowbElNSEJQTVhoMVpsWXhZMkpwU21SbVVUMDlYRzR2THlNZ2MyOTFjbU5sVlZKTVBTOVZjMlZ5Y3k5eVlXWmhaV3htWlhKdVlXNWtaWE12VUhKdmFtVmpkSE12Wm1sMExXWmhZMlZpYjI5ckwzZDNkeTl3ZFdKc2FXTXZiVzlrZFd4bGN5OW1aaTFtY21sbGJtUXZabVl1Wm5KcFpXNWtMbkp2ZFhSbGN5NXFjeUpkZlE9PVxuLy8jIHNvdXJjZVVSTD0vVXNlcnMvcmFmYWVsZmVybmFuZGVzL1Byb2plY3RzL2ZpdC1mYWNlYm9vay93d3cvcHVibGljL21vZHVsZXMvZmYtZnJpZW5kL2ZmLmZyaWVuZC5yb3V0ZXMuanMiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZmZGcmllbmRTZXJ2aWNlKCRodHRwKSB7XG4gIHJldHVybiB7bGlzdDogbGlzdH07XG4gIGZ1bmN0aW9uIGxpc3QoZm5TdWNjZXNzLCBmbkVycm9yKSB7XG4gICAgcmV0dXJuICRodHRwLmdldCgnL2ZhY2Vib29rL2ZyaWVuZHMnKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgaWYgKGZuU3VjY2Vzcykge1xuICAgICAgICBmblN1Y2Nlc3MoZGF0YSk7XG4gICAgICB9XG4gICAgfSkuZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICBpZiAoZm5FcnJvcikge1xuICAgICAgICBmbkVycm9yKGRhdGEpO1xuICAgICAgfVxuICAgICAgY29uc29sZS5sb2coJ2ZmTmV3c1NlcnZpY2UgZmFpbGVkIHRvIGdldCBhY3Rpdml0aWVzJyk7XG4gICAgfSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXJ2aWNlOiBbJyRodHRwJywgZmZGcmllbmRTZXJ2aWNlXSxcbiAgbmFtZTogJ2ZmRnJpZW5kU2VydmljZSdcbn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OXRiMlIxYkdWekwyWm1MV1p5YVdWdVpDOW1aaTVtY21sbGJtUXVjMlZ5ZG1salpTNXFjeUlzSW5OdmRYSmpaWE1pT2xzaUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OXRiMlIxYkdWekwyWm1MV1p5YVdWdVpDOW1aaTVtY21sbGJtUXVjMlZ5ZG1salpTNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVRkJMRmRCUVZjc1EwRkJRenRCUVVOYUxFOUJRVk1zWjBKQlFXTXNRMEZCUlN4TFFVRkpMRU5CUVVjN1FVRkRPVUlzVDBGQlR5eEZRVUZETEVsQlFVY3NRMEZCUnl4TFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOdVFpeFRRVUZUTEV0QlFVY3NRMEZCUlN4VFFVRlJMRU5CUVVjc1EwRkJRU3hQUVVGTkxFTkJRVWM3UVVGRGFFTXNVMEZCVHl4RFFVRkJMRXRCUVVrc1NVRkJTU3hCUVVGRExFTkJRVU1zYlVKQlFXdENMRU5CUVVNc1VVRkJVU3hCUVVGRExFTkJRVU1zVTBGQlV5eEpRVUZITEVOQlFVY3NRMEZCUVN4TlFVRkxMRU5CUVVjc1EwRkJRU3hQUVVGTkxFTkJRVWM3UVVGRE5VVXNVMEZCU1N4VFFVRlJMRU5CUVVjN1FVRkRZaXhuUWtGQlVTeEJRVUZETEVOQlFVTXNTVUZCUnl4RFFVRkRMRU5CUVVNN1RVRkRha0k3UVVGQlFTeEpRVU5HTEVOQlFVTXNUVUZCVFN4QlFVRkRMRU5CUVVNc1UwRkJVeXhKUVVGSExFTkJRVWNzUTBGQlFTeE5RVUZMTEVOQlFVY3NRMEZCUVN4UFFVRk5MRU5CUVVjN1FVRkRka01zVTBGQlNTeFBRVUZOTEVOQlFVYzdRVUZEV0N4alFVRk5MRUZCUVVNc1EwRkJReXhKUVVGSExFTkJRVU1zUTBGQlF6dE5RVU5tTzBGQlFVRXNRVUZEUVN4WlFVRk5MRWxCUVVrc1FVRkJReXhEUVVGRExIZERRVUYxUXl4RFFVRkRMRU5CUVVNN1NVRkRka1FzUTBGQlF5eERRVUZETzBWQlEwbzdRVUZCUVN4QlFVTkdPMEZCUVVFc1FVRkRRU3hMUVVGTExGRkJRVkVzUlVGQlNUdEJRVU5tTEZGQlFVMHNRMEZCUnl4RlFVRkRMRTlCUVUwc1EwRkJSeXhuUWtGQll5eERRVUZETzBGQlEyeERMRXRCUVVjc1EwRkJSeXhyUWtGQlowSTdRVUZCUVN4QlFVTjRRaXhEUVVGRE8wRkJSekJISWl3aWMyOTFjbU5sVW05dmRDSTZJaTlWYzJWeWN5OXlZV1poWld4bVpYSnVZVzVrWlhNdlVISnZhbVZqZEhNdlptbDBMV1poWTJWaWIyOXJMM2QzZHk5d2RXSnNhV012Ylc5a2RXeGxjeTltWmkxbWNtbGxibVF2SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1bWRXNWpkR2x2YmlCbVprWnlhV1Z1WkZObGNuWnBZMlVvSkdoMGRIQXBJSHRjYmlBZ2NtVjBkWEp1SUh0c2FYTjBPaUJzYVhOMGZUdGNiaUFnWm5WdVkzUnBiMjRnYkdsemRDaG1ibE4xWTJObGMzTXNJR1p1UlhKeWIzSXBJSHRjYmlBZ0lDQnlaWFIxY200Z0pHaDBkSEF1WjJWMEtDY3ZabUZqWldKdmIyc3ZabkpwWlc1a2N5Y3BMbk4xWTJObGMzTW9ablZ1WTNScGIyNG9aR0YwWVN3Z2MzUmhkSFZ6TENCb1pXRmtaWEp6S1NCN1hHNGdJQ0FnSUNCcFppQW9abTVUZFdOalpYTnpLU0I3WEc0Z0lDQWdJQ0FnSUdadVUzVmpZMlZ6Y3loa1lYUmhLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLUzVsY25KdmNpaG1kVzVqZEdsdmJpaGtZWFJoTENCemRHRjBkWE1zSUdobFlXUmxjbk1wSUh0Y2JpQWdJQ0FnSUdsbUlDaG1ia1Z5Y205eUtTQjdYRzRnSUNBZ0lDQWdJR1p1UlhKeWIzSW9aR0YwWVNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25abVpPWlhkelUyVnlkbWxqWlNCbVlXbHNaV1FnZEc4Z1oyVjBJR0ZqZEdsMmFYUnBaWE1uS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1ZlZ4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNGdJSE5sY25acFkyVTZJRnNuSkdoMGRIQW5MQ0JtWmtaeWFXVnVaRk5sY25acFkyVmRMRnh1SUNCdVlXMWxPaUFuWm1aR2NtbGxibVJUWlhKMmFXTmxKMXh1ZlR0Y2JseHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WkdGMFlUcGhjSEJzYVdOaGRHbHZiaTlxYzI5dU8ySmhjMlUyTkN4bGVVb3lXbGhLZW1GWE9YVkphbTk2VEVOS2JXRlhlR3hKYW05cFRERldlbHBZU25wTU0wcG9XbTFHYkdKSFdteGpiVFZvWW0xU2JHTjVPVkZqYlRseFdsZE9NR041T1cxaFdGRjBXbTFHYWxwWFNuWmlNbk4yWkROa00wd3pRakZaYlhod1dYazVkR0l5VWpGaVIxWjZUREphYlV4WFdubGhWMVoxV2tNNWJWcHBOVzFqYld4c1ltMVJkV015Vm5sa2JXeHFXbE0xY1dONVNYTkpiazUyWkZoS2FscFlUV2xQYkhOcFRERldlbHBZU25wTU0wcG9XbTFHYkdKSFdteGpiVFZvWW0xU2JHTjVPVkZqYlRseFdsZE9NR041T1cxaFdGRjBXbTFHYWxwWFNuWmlNbk4yWkROa00wd3pRakZaYlhod1dYazVkR0l5VWpGaVIxWjZUREphYlV4WFdubGhWMVoxV2tNNWJWcHBOVzFqYld4c1ltMVJkV015Vm5sa2JXeHFXbE0xY1dONVNtUk1RMHAxV1ZjeGJHTjVTVFpYTVRCelNXMHhhR05JUW5CaWJXUjZTV3B2YVZGVlJsSlJWSFJDVVZWR1FreEZPVUpSVmsxeldqQktRbEZYVFhOUk1FWkNVbE40VEZGVlJrcE1SVTVDVVZWak4xRlZSa1JQVlVselZEQkdRbFI1ZUVaUlZVNU5URVZzUWxGVlkzTlJNRVpDVW5sNFRGRlZSa2hNUlU1Q1VURm5jMUV3UmtKUlZIUkNVVmRHUWt4R1RrSlJWazF6VXpCR1FsSjVlRVJSVlVaR1RFWk9RbEZXUlhOUk1FWkNVbmw0UkZGVlJrSk1SVGxDVVZVd2MxRXdSa0pTVkhSQ1VWVk5kbEZwZUZSUlZVWlFURVZPUWxGVlJYTlRNRVpDVTFONFNsRlZSa3BNUlVaQ1VWVk5jMUV3UmtKUmVYaDBVV3RHUW1Fd1NYTlJNRVpDVVhsNFVsRlZUWHBSYVhoQ1VWVkdSRXhGVGtKUlZVMXpWVEJHUWxWNWVFcFJWVVpJVEVWT1FsRlZZM05STUVaQ1VWTjRUbEZWUmt4TVJVNUNVVlZqYzFFd1JrSlJVM2hRVVZWR1RreEZUa0pSVldNM1VWVkdSR1JyVFhOVk1FWkNVMU40VkZGVlJsSk1SVTVDVVZWVk4xRlZSa1JYYVhodVVXdEdRbFZUZUVKUlZVWkVURVZPUWxGVlRYTlRWVVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5OMVJWUmtSaGEwazNVVlZHUWxGVGVFcFJWVTVIVEVWT1FsRlZUWE5VVlVaRVUxTjRRbEZWUmtSTVJVNUNVVlZOYzFVd1JrSlZlWGhLVVZWR1NFeEZUa0pSVldOelVUQkdRbEZUZUU1UlZVWk1URVZPUWxGVlkzTlJNRVpDVVZONFVGRlZSazVNUlU1Q1VWVmpOMUZWUmtSamEwMXpWVEJHUWxOVGVGQlJWVVpPVEVWT1FsRlZWVGRSVlVaRVZtbDRhbEZWUms1TVJVWkNVVlZOYzFFd1JrSlJlWGhLVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2ZEU1UlZVNXRUekJHUWxGVlJYTlJWVVpFVVZONFdsRlZSazVNUld4Q1VWVnJjMUZWUmtKUmVYaEVVVlZHUkV4SVpFUlJWVVl4VVhsNFJGRlZSa1JNUlU1Q1VWVk5OMU5WUmtSa2ExRnpVVEJHUWxGNWVFUlJWVVpFVHpCV1FsRXdORGRSVlVaQ1VWTjRRbEZWVGtkUE1FWkNVVlZGYzFGVlJrWlJVM2hNVVZWR1RFeEdSa0pSVmtWelVsVkdRbE5VZEVKUlZVNXZVV2w0VWxGVlJrNU1SVTVDVVZWamMxSlZSa0pSZVhoUVVWVkdUa3hGVGtKUlZXTnpXakJLUWxGWFRYTlJNRVpDVVhwMFFsRlZUbk5SZVhoTVVWVkdTRXhGVGtKUlZXTnpZVEJLUWxGWFpFTlBNRVpDVVZWRmMxRlZSa1JrYTBselVUQkdRbEZVZEVKUlZVNUNTV2wzYVdNeU9URmpiVTVzVlcwNWRtUkRTVFpKYVRsV1l6SldlV041T1hsWlYxcG9XbGQ0YlZwWVNuVlpWelZyV2xoTmRsVklTblpoYlZacVpFaE5kbHB0YkRCTVYxcG9XVEpXYVdJeU9YSk1NMlF6WkhrNWQyUlhTbk5oVjAxMllsYzVhMlJYZUd4amVUbHRXbWt4YldOdGJHeGliVkYyU1dsM2FXTXlPVEZqYlU1c1l6Qk9kbUp1VW14aWJsRnBUMnh6YVV4NWIzRllSelJuUzJsQ1UxcFlUbmRpTWpWNllWZEtjMXBUUW0xaU0wbG5XbTVLY0ZwWE5XdGplVUp3WW0xYWRtTnRNV2hrUjJ4MllteDRkVWxEY0dOaWFVRnhTVVZDZFZveVVuWlplVUo2V2xoS01tRlhUbXhZUnpSblMybENRV0p0Um5SYVUwSnRXbXRhZVdGWFZuVmFSazVzWTI1YWNGa3lWbU5pYVVGeFNVVkNkRnBYTVdsYVdFcFFXbWxDYlZwcE5XMWpiV3hzWW0xU1RtSXlVakZpUjFaalltbEJjVWxGUW5sYVdFWXhZVmhLYkdONVFXdGhTRkl3WTBaNGRVbERiM1pZUnpWdFpGYzFhbVJIYkhaaWFVSnRXbXRhZVdGWFZuVmFSazVzWTI1YWNGa3lWVzlLUjJnd1pFaEJjRWxJZEdOaWFVRm5ZMjFXTUdSWVNuVkpTSFJqWW1sQlowbERRbk5oV0U0d1QybENjMkZZVGpCWVJ6Um5TVWd4WTJKc2VIVkpRMEYyUzJsd1kySnBRV2RKUTI5blZXMVdNR050Ykd4a2JWVm5aRWRvYkVsSGVIQmpNMUZuWWpKWloxcHVTbkJhVnpWclkzazFZMkpwUVdkSlEzQmpZbWxCWjBsRGIyZFJSelZ1V2tjNWFrbEhNV3hrUjJoMldrTkNZMkpwUVdkSlEyOW5VVWN4YkdSSGFIWmFSVGx0U1VkYWJVeHRXbmxoVjFaMVdrVXhkbHBJVm5OYVV6VnRXbXRhZVdGWFZuVmFSazVzWTI1YWNGa3lWbU5pYVVGblNVTnZaMUZITldoaVYxVm5XbTFaZFZwdVNuQmFWelZyVkZjNWEyUlhlR3hNYlZwdFVtNUtjRnBYTld0Vk1sWjVaRzFzYWxwVFRuTmhXRTR3U1VOQ1kySnBRV2RKUTI5blVVaENhR050Um5SSlNIUnRaRmMxYW1SSGJIWmliakJuV20wMVZHUlhUbXBhV0U1NlNVVldORnBYVGpGa1IxWjZTVWhrYjFwWE5HZGpNMVpxV1RKV2VtTXlXakZpUjNnMVNVaEtiR1JJU25CYVdGcHNZekY0ZFVsRFFXZExhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSVVtOWFVMEp6WVZoT01FbEhPVzFKUjFwNVlWZFdkVnBJVFdkamJWWnFXbGRzTW1GWE5XNUpTRkp2V2xOQ2VWcFlUakZpU0ZGMVdFYzBaMGxEUVhGSlJVSjNXVmhLYUdKVFFqZGFibFoxV1ROU2NHSXlOVGxKUjFwMVVsaEtlV0l6U1dkU1dHaHNXVE5XTUZwWVRXZGtNbWhzWW1sQ2JWbFhiSE5KU0ZKMlNVaEtiR1JJU25CYVdGcHNXRWMwWjBsRFFYRkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJSSGFHeEpSM2h3WXpOUloySXlXV2RhYmtwd1dsYzFhMk41UW5sYVYwNXNZVmhhY0dKdFkyZGtSMmhzU1VkV2VXTnRPWGxKUjFKb1pFZEZaMkl5U25GYVYwNHdTVWRhZVdJeU1HZGtSMmhzU1VkS2FGa3lkR3hpYlZGMVdFYzBaMGxEUVhGTU1YaDFTVU5DYldSWE5XcGtSMngyWW1sQ2MyRllUakJMUjFwMVZUTldhbGt5Vm5wamVYZG5XbTAxUm1OdVNuWmphV3czV0VjMFowbERRV2RqYlZZd1pGaEtkVWxEVW05a1NGSjNURzFrYkdSRFoyNU1NbHBvV1RKV2FXSXlPWEpNTWxwNVlWZFdkVnBJVFc1TFZuaDFTVU5CWjBsRFFXZE1iazR4V1RKT2JHTXpUVzlhYmxaMVdUTlNjR0l5Tkc5YVIwWXdXVk4zWjJNelVtaGtTRlo2VEVOQ2IxcFhSbXRhV0VwNlMxTkNOMWhITkdkSlEwRm5TVU5CWjBsSGJHMUpRMmh0WW14T01Wa3lUbXhqTTAxd1pURjRkVWxEUVdkSlEwRm5TVU5CWjBsSFduVlZNMVpxV1RKV2VtTjVhR3RaV0ZKb1MxUjBZMkpwUVdkSlEwRm5TVU5CWjJaV2VIVkpRMEZuU1VOQloyWlRiR05pYVVGblNVTkJaMGxETld4amJrcDJZMmxvYldSWE5XcGtSMngyWW1sb2ExbFlVbWhNUTBKNlpFZEdNR1JZVFhOSlIyaHNXVmRTYkdOdVRYQkpTSFJqWW1sQlowbERRV2RKUTBGbllWZFpaMHRIV25WU1dFcDVZak5KY0dVeGVIVkpRMEZuU1VOQlowbERRV2RKUjFwMVVsaEtlV0l6U1c5YVIwWXdXVk5yTjFoSE5HZEpRMEZuU1VOQlowbElNV05pYVVGblNVTkJaMGxEUVdkWk1qbDFZekk1YzFwVE5YTmlNbU52U2pKYWJWUnRWak5qTVU1c1kyNWFjRmt5VldkYWJVWndZa2RXYTBsSVVuWkpSMlJzWkVOQ2FGa3pVbkJrYld3d1lWZFdla3A1YXpkWVJ6Um5TVU5CWjBsRFFqbExWSFJqWW1sQloyWldlSFZtVm5oMVdFYzFkR0l5VWpGaVIxVjFXbGhvZDJJelNqQmplVUU1U1VoMFkySnBRbnBhV0VveVlWZE9iRTlwUW1KS2VWSnZaRWhTZDBwNWQyZGFiVnBIWTIxc2JHSnRVbFJhV0VveVlWZE9iRmhUZUdOaWFVSjFXVmN4YkU5cFFXNWFiVnBIWTIxc2JHSnRVbFJhV0VveVlWZE9iRW94ZUhWbVZuaDFTV3d4T1Z4dUx5OGpJSE52ZFhKalpWVlNURDB2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDIxdlpIVnNaWE12Wm1ZdFpuSnBaVzVrTDJabUxtWnlhV1Z1WkM1elpYSjJhV05sTG1weklsMTlcbi8vIyBzb3VyY2VVUkw9L1VzZXJzL3JhZmFlbGZlcm5hbmRlcy9Qcm9qZWN0cy9maXQtZmFjZWJvb2svd3d3L3B1YmxpYy9tb2R1bGVzL2ZmLWZyaWVuZC9mZi5mcmllbmQuc2VydmljZS5qcyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgbmV3c0ZlZWQgPSByZXF1aXJlKCcuL2ZmLm5ld3MuZmVlZC5kaXJlY3RpdmUuanMnKTtcbmFuZ3VsYXIubW9kdWxlKCdmZi5uZXdzTW9kdWxlJywgW10pLmZhY3RvcnkoJ2ZmTmV3c1NlcnZpY2UnLCByZXF1aXJlKCcuL2ZmLm5ld3Muc2VydmljZS5qcycpKS5kaXJlY3RpdmUobmV3c0ZlZWQubmFtZSwgbmV3c0ZlZWQuZGlyZWN0aXZlKS5jb250cm9sbGVyKG5ld3NGZWVkLmNvbnRyb2xsZXJOYW1lLCBuZXdzRmVlZC5jb250cm9sbGVyKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXNWxkM012Wm1ZdWJtVjNjeTVoY0hBdWFuTWlMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl5WVdaaFpXeG1aWEp1WVc1a1pYTXZVSEp2YW1WamRITXZabWwwTFdaaFkyVmliMjlyTDNkM2R5OXdkV0pzYVdNdmJXOWtkV3hsY3k5bVppMXVaWGR6TDJabUxtNWxkM011WVhCd0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlFVRXNWMEZCVnl4RFFVRkRPMEZCUTFvc1FVRkJTU3hGUVVGQkxFTkJRVUVzVVVGQlR5eEZRVUZKTEVOQlFVRXNUMEZCVFN4QlFVRkRMRU5CUVVNc05rSkJRVFJDTEVOQlFVTXNRMEZCUXp0QlFVTnlSQ3hOUVVGTkxFOUJRVThzUVVGQlF5eERRVUZETEdWQlFXTXNRMEZCUnl4SFFVRkRMRU5CUVVNc1VVRkJVU3hCUVVGRExFTkJRVU1zWlVGQll5eERRVUZITEVOQlFVRXNUMEZCVFN4QlFVRkRMRU5CUVVNc2MwSkJRWEZDTEVOQlFVTXNRMEZCUXl4VlFVRlZMRUZCUVVNc1EwRkJReXhSUVVGUExFdEJRVXNzUTBGQlJ5eERRVUZCTEZGQlFVOHNWVUZCVlN4RFFVRkRMRmRCUVZjc1FVRkJReXhEUVVGRExGRkJRVThzWlVGQlpTeERRVUZITEVOQlFVRXNVVUZCVHl4WFFVRlhMRU5CUVVNc1EwRkJRenRCUVVkb1J5SXNJbk52ZFhKalpWSnZiM1FpT2lJdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyMXZaSFZzWlhNdlptWXRibVYzY3k4aUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmNJblZ6WlNCemRISnBZM1JjSWp0Y2JuWmhjaUJ1WlhkelJtVmxaQ0E5SUhKbGNYVnBjbVVvSnk0dlptWXVibVYzY3k1bVpXVmtMbVJwY21WamRHbDJaUzVxY3ljcE8xeHVZVzVuZFd4aGNpNXRiMlIxYkdVb0oyWm1MbTVsZDNOTmIyUjFiR1VuTENCYlhTa3VabUZqZEc5eWVTZ25abVpPWlhkelUyVnlkbWxqWlNjc0lISmxjWFZwY21Vb0p5NHZabVl1Ym1WM2N5NXpaWEoyYVdObExtcHpKeWtwTG1ScGNtVmpkR2wyWlNodVpYZHpSbVZsWkM1dVlXMWxMQ0J1WlhkelJtVmxaQzVrYVhKbFkzUnBkbVVwTG1OdmJuUnliMnhzWlhJb2JtVjNjMFpsWldRdVkyOXVkSEp2Ykd4bGNrNWhiV1VzSUc1bGQzTkdaV1ZrTG1OdmJuUnliMnhzWlhJcE8xeHVYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybE1NVlo2V2xoS2Vrd3pTbWhhYlVac1lrZGFiR050TldoaWJWSnNZM2s1VVdOdE9YRmFWMDR3WTNrNWJXRllVWFJhYlVacVdsZEtkbUl5YzNaa00yUXpURE5DTVZsdGVIQlplVGwwWWpKU01XSkhWbnBNTWxwdFRGYzFiR1F6VFhaYWJWbDFZbTFXTTJONU5XaGpTRUYxWVc1TmFVeERTbnBpTTFaNVdUSldla2xxY0dKSmFUbFdZekpXZVdONU9YbFpWMXBvV2xkNGJWcFlTblZaVnpWcldsaE5kbFZJU25aaGJWWnFaRWhOZGxwdGJEQk1WMXBvV1RKV2FXSXlPWEpNTTJRelpIazVkMlJYU25OaFYwMTJZbGM1YTJSWGVHeGplVGx0V21reGRWcFlaSHBNTWxwdFRHMDFiR1F6VFhWWldFSjNURzF3ZWtsc01ITkpiVFZvWWxkV2VrbHFjR0pZVTNkcFlsZEdkMk5IYkhWYU0wMXBUMmxLUWxGVlJrSlBNRVpDVVZWRmMxRlZSa0pUVTNoR1VWVkdRa3hGVGtKUlZVVnpWVlZHUWxSNWVFWlJWVVpLVEVWT1FsRlZSWE5VTUVaQ1ZGTjRRbEZWUmtSTVJVNUNVVlZOYzA1clNrSlJWRkpEVEVWT1FsRlZUWE5STUVaQ1VYcDBRbEZXUm5sU1EzaE9VVlZHVGt4Rk9VSlJWVGh6VVZWR1FsRjVlRVJSVlVaRVRFZFdRbEZYVFhOUk1FWkNVbmw0U0ZGVlJrUk1SVTVDVVZWTmMxVlZSa1JqUlVselVWVkdRbEY1ZUVSUlZVWkVURWRXUWxGWFRYTlJNRVpDVW5sNFJGRlZSa0pNUlRsQ1VWVXdjMUZWUmtKUmVYaEVVVlZHUkV4SVRrTlJWVVo0VVdsNFJGRlZSa1JNUlU1Q1VWVk5jMVpWUmtSaFJWRnpVVlZHUWxGNWVFUlJWVVpFVEVaR1FsRlZPSE5UTUVaQ1UzbDRSRkZWUmtoTVJVNUNVVlZGYzFWVlJrSlVlWGhXVVZWR1ZreEZUa0pSVlUxelZqQkdSR0pGVFhOUlZVWkNVWGw0UkZGVlJrUk1Sa1pDVVZVNGMxcFZSa0phVTNoRVVWVkdTRXhGVGtKUlZVVnpWVlZHUWxSNWVGaFJWVVpZVEVWT1FsRlZUWE5STUVaQ1VWUjBRbEZWVFhaU1EwbHpTVzVPZG1SWVNtcGFWa3AyWWpOUmFVOXBTWFpXV0U1c1kyNU5kbU50Um0xWlYxWnpXbTFXZVdKdFJuVmFSMVo2VERGQ2VXSXljR3haTTFKNlRESmFjR1JETVcxWlYwNXNXVzA1ZG1GNU9UTmtNMk4yWTBoV2FXSkhiR3BNTWpGMldraFdjMXBZVFhaYWJWbDBZbTFXTTJONU9HbE1RMHA2WWpOV2VWa3lWbnBSTWpsMVpFZFdkV1JEU1RaWGVVb3lXVmhKWjJKdFZqTmpNRnBzV2xkUloxQlRRbmxhV0VZeFlWaEtiRXREWTNWTU1scHRURzAxYkdRelRYVmFiVlpzV2tNMWEyRllTbXhaTTFKd1pHMVZkV0Z1VFc1TFZIUmpZbXg0ZFV4NWIzRllSelJuUzJsQ1UxcFlUbmRpTWpWNllWZEtjMXBUUW0xaU0wbG5ZbTFXTTJONVFtcGlNalV3V2xjMU1GaEhOR2RMYkhoMVNVTnZaMUZITlc1YVJ6bHFTVWN4ZGxwSVZuTmFWbmgxU1VOdloxRkhOV2hpVjFWbldtMVpkV0p0VmpOak1ERjJXa2hXYzFwVFFtTmlhVUZ4VERGNGRWbFhOVzVrVjNob1kyazFkR0l5VWpGaVIxVnZTakphYlV4dE5XeGtNMDVPWWpKU01XSkhWVzVNUTBKaVdGTnNZMkpwUVdkSlEwRm5TVU5CZFZwdFJtcGtSemw1WlZObmJscHRXazlhV0dSNlZUSldlV1J0YkdwYVUyTnpTVWhLYkdOWVZuQmpiVlZ2U25rMGRscHRXWFZpYlZZelkzazFlbHBZU2pKaFYwNXNURzF3ZWtwNWEzQllSelJuU1VOQlowbERRV2RNYlZKd1kyMVdhbVJIYkRKYVUyaDFXbGhrZWxKdFZteGFRelYxV1ZjeGJFeERRblZhV0dSNlVtMVdiRnBETld0aFdFcHNXVE5TY0dSdFZYQllSelJuU1VOQlowbERRV2RNYlU1MlltNVNlV0l5ZUhOYVdFbHZZbTFXTTJNd1dteGFWMUYxV1RJNWRXUklTblppUjNoc1kyczFhR0pYVlhOSlJ6VnNaRE5PUjFwWFZtdE1iVTUyWW01U2VXSXllSE5hV0Vsd1dFYzBhVmhZTUQxY2JpOHZJeUJ6YjNWeVkyVlZVa3c5TDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXNWxkM012Wm1ZdWJtVjNjeTVoY0hBdWFuTWlYWDA9XG4vLyMgc291cmNlVVJMPS9Vc2Vycy9yYWZhZWxmZXJuYW5kZXMvUHJvamVjdHMvZml0LWZhY2Vib29rL3d3dy9wdWJsaWMvbW9kdWxlcy9mZi1uZXdzL2ZmLm5ld3MuYXBwLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGZmTmV3c0ZlZWQoKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9tb2R1bGVzL2ZmLW5ld3MvZmYubmV3cy5mZWVkLmRpcmVjdGl2ZS50bXBsLmh0bWwnLFxuICAgIGNvbnRyb2xsZXI6ICdmZk5ld3NGZWVkQ29udHJvbGxlciBhcyB2bScsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHt9XG4gIH07XG59XG5mdW5jdGlvbiBmZk5ld3NGZWVkQ29udHJvbGxlcigkc2NvcGUsICRyb290U2NvcGUsIGZmTmV3c1NlcnZpY2UpIHtcbiAgdmFyIHZtID0gdGhpcztcbiAgJHNjb3BlLiRvbignYXV0aGVudGljYXRlZCcsIGxvYWRBY3Rpdml0aWVzKTtcbiAgaWYgKCRyb290U2NvcGUudG9rZW4pIHtcbiAgICBsb2FkQWN0aXZpdGllcygpO1xuICB9XG4gIGZ1bmN0aW9uIGxvYWRBY3Rpdml0aWVzKCkge1xuICAgIGZmTmV3c1NlcnZpY2UuYWN0aXZpdGllcyhwb3B1bGF0ZU5ld3MpO1xuICB9XG4gIGZ1bmN0aW9uIHBvcHVsYXRlTmV3cyhyZXN1bHQpIHtcbiAgICBkZWJ1Z2dlcjtcbiAgICB2bS5uZXdzID0gcmVzdWx0LnBvc3RzLmRhdGE7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkaXJlY3RpdmU6IFtmZk5ld3NGZWVkXSxcbiAgbmFtZTogJ2ZmTmV3c0ZlZWQnLFxuICBjb250cm9sbGVyOiBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJ2ZmTmV3c1NlcnZpY2UnLCBmZk5ld3NGZWVkQ29udHJvbGxlcl0sXG4gIGNvbnRyb2xsZXJOYW1lOiAnZmZOZXdzRmVlZENvbnRyb2xsZXInXG59O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFc1bGQzTXZabVl1Ym1WM2N5NW1aV1ZrTG1ScGNtVmpkR2wyWlM1cWN5SXNJbk52ZFhKalpYTWlPbHNpTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXNWxkM012Wm1ZdWJtVjNjeTVtWldWa0xtUnBjbVZqZEdsMlpTNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVRkJMRmRCUVZjc1EwRkJRenRCUVVOYUxFOUJRVk1zVjBGQlV5eERRVUZETEVGQlFVTXNRMEZCUlR0QlFVTndRaXhQUVVGUE8wRkJRMHdzVjBGQlR5eERRVUZITEVsQlFVVTdRVUZEV2l4aFFVRlRMRU5CUVVjc1MwRkJSenRCUVVObUxHTkJRVlVzUTBGQlJ5eHhSRUZCYlVRN1FVRkRhRVVzWVVGQlV5eERRVUZITERaQ1FVRXlRanRCUVVOMlF5eFZRVUZOTEVOQlFVY3NTMEZCUnp0QlFVTmFMRTlCUVVjc1EwRkJSeXhWUVVGVExFdEJRVWtzUTBGQlJ5eERRVUZCTEU5QlFVMHNRMEZCUnl4RFFVRkJMRXRCUVVrc1EwRkJSeXhIUVVGRE8wRkJRVUVzUlVGRGVrTXNRMEZCUXp0QlFVTklPMEZCUVVFc1FVRkRRU3hQUVVGVExIRkNRVUZ0UWl4RFFVRkZMRTFCUVVzc1EwRkJSeXhEUVVGQkxGVkJRVk1zUTBGQlJ5eERRVUZCTEdGQlFWa3NRMEZCUnp0QlFVTXZSQ3hCUVVGSkxFbEJRVUVzUTBGQlFTeEZRVUZETEVWQlFVa3NTMEZCUnl4RFFVRkRPMEZCUTJJc1QwRkJTeXhKUVVGSkxFRkJRVU1zUTBGQlF5eGxRVUZqTEVOQlFVY3NaVUZCWVN4RFFVRkRMRU5CUVVNN1FVRkRNME1zUzBGQlNTeFZRVUZUTEUxQlFVMHNRMEZCUnp0QlFVTndRaXhwUWtGQllTeEJRVUZETEVWQlFVTXNRMEZCUXp0RlFVTnNRanRCUVVGQkxFRkJRMEVzVTBGQlV5eGxRVUZoTEVOQlFVTXNRVUZCUXl4RFFVRkZPMEZCUTNoQ0xHZENRVUZaTEZkQlFWY3NRVUZCUXl4RFFVRkRMRmxCUVZjc1EwRkJReXhEUVVGRE8wVkJRM2hETzBGQlFVRXNRVUZEUVN4VFFVRlRMR0ZCUVZjc1EwRkJSU3hOUVVGTExFTkJRVWM3UVVGRE5VSXNXVUZCVVR0QlFVTlNMRXRCUVVNc1MwRkJTeXhGUVVGSkxFTkJRVUVzVFVGQlN5eE5RVUZOTEV0QlFVc3NRMEZCUXp0RlFVTTNRanRCUVVGQkxFRkJRMFk3UVVGQlFTeEJRVU5CTEV0QlFVc3NVVUZCVVN4RlFVRkpPMEZCUTJZc1ZVRkJVU3hEUVVGSExFVkJRVU1zVlVGQlV5eERRVUZETzBGQlEzUkNMRXRCUVVjc1EwRkJSeXhoUVVGWE8wRkJRMnBDTEZkQlFWTXNRMEZCUnl4RlFVRkRMRkZCUVU4c1EwRkJSeXhoUVVGWExFTkJRVWNzWjBKQlFXTXNRMEZCUnl4eFFrRkJiVUlzUTBGQlF6dEJRVU14UlN4bFFVRmhMRU5CUVVjc2RVSkJRWEZDTzBGQlFVRXNRVUZEZGtNc1EwRkJRenRCUVVjMlJ5SXNJbk52ZFhKalpWSnZiM1FpT2lJdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyMXZaSFZzWlhNdlptWXRibVYzY3k4aUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmNJblZ6WlNCemRISnBZM1JjSWp0Y2JtWjFibU4wYVc5dUlHWm1UbVYzYzBabFpXUW9LU0I3WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnY21WemRISnBZM1E2SUNkRkp5eGNiaUFnSUNCMGNtRnVjMk5zZFdSbE9pQjBjblZsTEZ4dUlDQWdJSFJsYlhCc1lYUmxWWEpzT2lBbkxpOXRiMlIxYkdWekwyWm1MVzVsZDNNdlptWXVibVYzY3k1bVpXVmtMbVJwY21WamRHbDJaUzUwYlhCc0xtaDBiV3duTEZ4dUlDQWdJR052Ym5SeWIyeHNaWEk2SUNkbVprNWxkM05HWldWa1EyOXVkSEp2Ykd4bGNpQmhjeUIyYlNjc1hHNGdJQ0FnY21Wd2JHRmpaVG9nZEhKMVpTeGNiaUFnSUNCc2FXNXJPaUJtZFc1amRHbHZiaWh6WTI5d1pTd2daV3hsYldWdWRDd2dZWFIwY25NcElIdDlYRzRnSUgwN1hHNTlYRzVtZFc1amRHbHZiaUJtWms1bGQzTkdaV1ZrUTI5dWRISnZiR3hsY2lna2MyTnZjR1VzSUNSeWIyOTBVMk52Y0dVc0lHWm1UbVYzYzFObGNuWnBZMlVwSUh0Y2JpQWdkbUZ5SUhadElEMGdkR2hwY3p0Y2JpQWdKSE5qYjNCbExpUnZiaWduWVhWMGFHVnVkR2xqWVhSbFpDY3NJR3h2WVdSQlkzUnBkbWwwYVdWektUdGNiaUFnYVdZZ0tDUnliMjkwVTJOdmNHVXVkRzlyWlc0cElIdGNiaUFnSUNCc2IyRmtRV04wYVhacGRHbGxjeWdwTzF4dUlDQjlYRzRnSUdaMWJtTjBhVzl1SUd4dllXUkJZM1JwZG1sMGFXVnpLQ2tnZTF4dUlDQWdJR1ptVG1WM2MxTmxjblpwWTJVdVlXTjBhWFpwZEdsbGN5aHdiM0IxYkdGMFpVNWxkM01wTzF4dUlDQjlYRzRnSUdaMWJtTjBhVzl1SUhCdmNIVnNZWFJsVG1WM2N5aHlaWE4xYkhRcElIdGNiaUFnSUNCa1pXSjFaMmRsY2p0Y2JpQWdJQ0IyYlM1dVpYZHpJRDBnY21WemRXeDBMbkJ2YzNSekxtUmhkR0U3WEc0Z0lIMWNibjFjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTF4dUlDQmthWEpsWTNScGRtVTZJRnRtWms1bGQzTkdaV1ZrWFN4Y2JpQWdibUZ0WlRvZ0oyWm1UbVYzYzBabFpXUW5MRnh1SUNCamIyNTBjbTlzYkdWeU9pQmJKeVJ6WTI5d1pTY3NJQ2NrY205dmRGTmpiM0JsSnl3Z0oyWm1UbVYzYzFObGNuWnBZMlVuTENCbVprNWxkM05HWldWa1EyOXVkSEp2Ykd4bGNsMHNYRzRnSUdOdmJuUnliMnhzWlhKT1lXMWxPaUFuWm1aT1pYZHpSbVZsWkVOdmJuUnliMnhzWlhJblhHNTlPMXh1WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWtZWFJoT21Gd2NHeHBZMkYwYVc5dUwycHpiMjQ3WW1GelpUWTBMR1Y1U2pKYVdFcDZZVmM1ZFVscWIzcE1RMHB0WVZkNGJFbHFiMmxNTVZaNldsaEtla3d6U21oYWJVWnNZa2RhYkdOdE5XaGliVkpzWTNrNVVXTnRPWEZhVjA0d1kzazViV0ZZVVhSYWJVWnFXbGRLZG1JeWMzWmtNMlF6VEROQ01WbHRlSEJaZVRsMFlqSlNNV0pIVm5wTU1scHRURmMxYkdRelRYWmFiVmwxWW0xV00yTjVOVzFhVjFaclRHMVNjR050Vm1wa1Iyd3lXbE0xY1dONVNYTkpiazUyWkZoS2FscFlUV2xQYkhOcFRERldlbHBZU25wTU0wcG9XbTFHYkdKSFdteGpiVFZvWW0xU2JHTjVPVkZqYlRseFdsZE9NR041T1cxaFdGRjBXbTFHYWxwWFNuWmlNbk4yWkROa00wd3pRakZaYlhod1dYazVkR0l5VWpGaVIxWjZUREphYlV4WE5XeGtNMDEyV20xWmRXSnRWak5qZVRWdFdsZFdhMHh0VW5CamJWWnFaRWRzTWxwVE5YRmplVXBrVEVOS2RWbFhNV3hqZVVrMlZ6RXdjMGx0TVdoalNFSndZbTFrZWtscWIybFJWVVpXVVZSMFFsRlZSa0pNUlRsQ1VWWk5jMVl3UmtKVmVYaEVVVlZHUkV4RlJrSlJWVTF6VVRCR1FsSlVkRUpSVlU1elVXbDRVRkZWUmxCUE1FWkNVVEJuYzFZd1JrSlVlWGhFVVZWR1NFeEZiRUpSVlZVM1VWVkdSRmRwZUdoUlZVWlVURVZPUWxGVlkzTlRNRVpDVW5wMFFsRlZUbTFNUjA1Q1VWWlZjMUV3UmtKU2VYaDRVa1ZHUW1KVlVUZFJWVVpFWVVWVmMxbFZSa0pWZVhoRVVWVkdTRXhFV2tOUlZVVjVVV3AwUWxGVlRqSlJlWGhXVVZWR1RreEZUa0pSVldOelV6QkdRbEo2ZEVKUlZVNWhURVU1UWxGVlkzTlJNRVpDVW5sNFZsRlZSbFJNUlhSQ1VWVnJjMUV3UmtKU2VYaEVVVlZHUWt4Rk9VSlJWVEJ6VVRCR1FsSjVlRVJSVlVaQ1RFVjBRbEZWYTNOUk1FWkNVbmw0U0ZGVlZqQlJlblJDVVZWR1FreEZWa0pSTUc5elVUQkdRbEY2ZEVKUlZVNU5UekJHUWxGVlJYTlJWVVpHVVZONFVGRlZSbFJNU0VaRFVWVkdkRkZwZUVSUlZVWkdURVV4UWxGVmMzTlJNRVpDVW5sNFJGRlZSa0pNUmxaQ1VWWk5jMUV3UmtKU2VYaEVVVlZHUWt4SFJrSlJWbXR6VVRCR1FsSlVkRUpSVlUwMVVrTjRRbEZWUmtwTVJXeENVVlZGYzFFd1JrSlJVM2hHVVZWR1JFeEZWa0pSVld0elV6QkdRbEo1ZUVSUlZVWkVUekJHUWxFeVNYTlVNRVpDVTNsNFNsRlZSa3BNUlVaQ1VWVk5jMUV3UmtKUmVYaHNVVlZHYWt4RlRrSlJWV056V2xWR1FsbFRlRVJSVlVaRVRFVk9RbEZWVFRkUlZVWkdUVEJOYzFNd1JrSlRVM2hXVVZWR1ZFeEZNVUpSVlRCelVUQkdRbEpVZEVKUlZVNTFVV2w0Y0ZGclJrSlpVM2hDVVZWR1JFeEZWa0pSVlUxelVUQkdRbEY2ZEVaUlZVNXpVV3AwUWxGVlJrSk1SVVpDVWxWRmMxVXdSa0pWZVhoc1VWVkdhRXhGVGtKUlZVMXpVVlZHUWxGNWVFUlJWVVpFVHpCR1FsRXpXa05NUjJSRFVWVkdXa3hHWkVKUlZtTnpVVlZHUWxGNWVFUlJWVVpFVEVac1FsRldZM05STUVaQ1VYbDRSRkZWUmtSUE1GWkNVVE5vUkU4d1JrSlJWVVZ6VVZWR1JsRlRlRlJSVlVaVVRFZEdRbEZXWTNOUk1FWkNVbE40VGxGVlJreE1SVTVDVVZWVk4xRlZSa1JOTUVselYxVkdRbFZVZEVKUlZVNVRURVYwUWxGVlRYTlRNRVpDVTNsNFJsRlZSa3BNUlU1Q1VWVkZjMVJWUmtKVGVYaE9VVlZHVGt4RmRFSlJWWE56VVRCR1FsRjZkRVpSVlUwelVXcDBRbEZWUmtKTVJVWkNVVEJaTjFGVlJrSlJVM2hDVVZWV1FreEZkRUpSVlhOelZWVkdRbFZUZUVaUlZVWktUekJHUWxFeVdYTldWVVpDVlZONFJGRlZSa2hNUlZaQ1VWVk5jMVpWUmtKVmVYaEVVVlZHUkU4d1JrSlJNMUpEVEVWMFFsRlZZM05STUVaQ1VubDRhRkZWUmxoUE1FWkNVVEp3UTB4R1pFSlJWazF6VVRCR1FsSjVlRVpSVlVaRVRFWkdRbEZWT0hOUk1FWkNVbmw0YUZGVlJsaE1SVTVDVVZWVmMxb3dTa0pSVjAxelVUQkdRbEo1ZUhoUmEwWkNZbFZKYzFFd1JrSlJlblJDVVZWT05sSlRlR3hSVlVab1RFVk9RbEZWWTNOa1ZVcENVVmhHUTA4d1JrSlJWVVZ6VVZWR1JHUnJUWE5STUVaQ1VYcDBRbEZWVmtWSmFYZHBZekk1TVdOdFRteFZiVGwyWkVOSk5rbHBPVlpqTWxaNVkzazVlVmxYV21oYVYzaHRXbGhLZFZsWE5XdGFXRTEyVlVoS2RtRnRWbXBrU0UxMldtMXNNRXhYV21oWk1sWnBZakk1Y2t3elpETmtlVGwzWkZkS2MyRlhUWFppVnpsclpGZDRiR041T1cxYWFURjFXbGhrZWt4NVNYTkpiazUyWkZoS2FscFlUa1JpTWpVd1dsYzFNRWxxY0dKSmFUaHhTMng0ZFVsRGIyZFJSelZ1V2tjNWFrbEhVbkJqYlZacVpFZHNNbHBXZUhWSlEyOW5VVWN4YkdKWFNteGphemx0U1VkYWJVeHROV3hrTTA1T1lqSlNNV0pIVm1OaWFVRnhTVVZDZFZsWE1XeEpSMXB0VkcxV00yTXdXbXhhVjFKalltbEJjVWxGUW10YVdFNXFZMjFzZDJSSGJIWmlhVUpGWVZoS2JGa3pVbkJrYlZWblkyMVdlbU5IT1hWak1teHBZa2RWWjJSSE9HZGpiVloxV2tkV2VVbElVbTlhVTBKMVdsaGtla2xIV214YVYxRjFTVVo0ZFVsRGNHTmlhVUZ4U1VoMFFXSkhiSFZoZVVKdlpFaFNkMk42YjNaTU1tUndaRWRvTVZscE5XcGlNakIyWTIxR2JWbFhWbk5hYlZaNVltMUdkVnBIVm5waWJWWXdUREphY0dSRE1XMVpWMDVzV1cwNWRtRjVPV2xpUnpscFRESXhhR016VW14amFUa3paRE5qZG1OSVZtbGlSMnhxVERJeGRscElWbk5hV0UxMldtMVpkR0p0VmpOamVUbHRXbWsxZFZwWVpIcE1iVnBzV2xkUmRWcEhiSGxhVjA0d1lWaGFiRXh0Y0hwSlJYaHdZbTF6WjJSSE9HZGtSMmhzU1VkT2RscEhWamxZUnpSblMybENRVnBZYUdoaVdFSnpXbE5DWTJKcFFYRkpSSGh0V21reGRWcFlaSHBNVjFwc1dsZFJLMGxFZDNaYWJWbDBZbTFXTTJONU1XMWFWMVpyVUd4NGRVbERiM1pZUnpWdFpGYzFhbVJIYkhaaWFVSnRXbXMxYkdRelRrZGFWMVpyUzBOcloyVXhlSFZKUTBGblNVaEtiR1JJVm5saWFVSTNXRWMwWjBsRFFXZEpRMEZuU1VoS2JHTXpVbmxoVjA0d1QybEJibEpUWTNOWVJ6Um5TVU5CWjBsRFFXZEpTRko1V1ZjMWVsa3llREZhUjFVMlNVaFNlV1JYVlhOWVJ6Um5TVU5CWjBsRFFXZEpTRkpzWWxoQ2MxbFlVbXhXV0VwelQybEJia3hwT1hSaU1sSXhZa2RXZWt3eVdtMU1WelZzWkROTmRscHRXWFZpYlZZelkzazFiVnBYVm10TWJWSndZMjFXYW1SSGJESmFVelV3WWxoQ2MweHRhREJpVjNkdVRFWjRkVWxEUVdkSlEwRm5TVU5DYW1JeU5UQmpiVGx6WWtkV2VVOXBRVzVhYlZwUFdsaGtlbEp0Vm14YVJVNTJZbTVTZVdJeWVITmFXRWxuV1ZoTloyUnRNRzVNUm5oMVNVTkJaMGxEUVdkSlEwSjVXbGhDYzFsWFRteFBhVUl3WTI1V2JFeEdlSFZKUTBGblNVTkJaMGxEUW5OaFZ6VnlUMmxDYldSWE5XcGtSMngyWW1sb2Vsa3lPWGRhVTNkbldsZDRiR0pYVm5Wa1EzZG5XVmhTTUdOdVRYQkpTSFJqWW14NGRVbERRV2RKUTBGblNVTkNPVmhITkdkSlEwRm5abFIwWTJKdU1XTmliSGgxV201V2RWa3pVbkJpTWpSbldtMWFUMXBZWkhwU2JWWnNXa1ZPZG1KdVVubGlNbmh6V2xoSmIwcElUbXBpTTBKc1RFTkJhMk50T1haa1JrNXFZak5DYkV4RFFtMWFhelZzWkROT1ZGcFlTakpoVjA1c1MxaDBZMkpwUVdka2JVWjVTVWhhZEVsRU1HZGtSMmh3WTNwMFkySnBRV2RLU0U1cVlqTkNiRXhwVW5aaWFXZHVXVmhXTUdGSFZuVmtSMnhxV1ZoU2JGcERZM05KUjNoMldWZFNRbGt6VW5Ca2JXd3dZVmRXZWt0VWRHTmliSGgxU1VOQ2NGcHBRVzlLU0VwMllqTlNWRmt5T1hkYVV6VXdZakowYkdKcGJEZFlSelJuU1VOQloySkhPV2hhUlVacVpFZHNNbUZZVW5CYVdFMXZTMVIwWTJKcFFXZG1WbmgxV0VjMFowbEhXakZpYlU0d1lWYzVkVWxIZUhaWlYxSkNXVE5TY0dSdGJEQmhWMVo2UzBOc04xaEhOR2RKUTBGbldtMWFUMXBZWkhwVk1sWjVaRzFzYWxwVE5XaFpNMUp3Wkcxc01HRlhWbnBMU0VKMlkwaFdjMWxZVW14VWJWWXpZM2xyTjFoSE5HZEpTREZqWW14NGRVbERRbTFrVnpWcVpFZHNkbUpwUW5kaU0wSXhZa2RHTUZwVk5XeGtNMDF2WTIxV2VtUlhlREJMV0hSalltbEJaMGxEUW10YVYwb3hXakprYkdOcWRHTmlhVUZuU1VOQ01tSlROWFZhV0dSNlNVUXdaMk50Vm5wa1YzZ3dURzVDZG1NelVucE1iVkpvWkVkRk4wbEdlSFZKUTBJNVdFYzFPVmhITldOaWJURjJXa2hXYzFwVE5XeGxTRUoyWTI1U2VrbEVNR2RsTVhoMVNVTkNhMkZZU214Wk0xSndaRzFWTmtsR2RHMWFhelZzWkROT1IxcFhWbXRZVTNoalltbEJaMkp0Um5SYVZHOW5TakphYlZSdFZqTmpNRnBzV2xkUmJreEdlSFZKUTBKcVlqSTFNR050T1hOaVIxWjVUMmxDWWtwNVVucFpNamwzV2xOamMwbERZMnRqYlRsMlpFWk9hbUl6UW14S2VYZHVXbTFhVDFwWVpIcFZNbFo1Wkcxc2FscFRZM05KUjFwdFZHMVdNMk13V214YVYxSkVZakkxTUdOdE9YTmlSMVo1V0ZONFkySnBRV2RaTWpsMVpFaEtkbUpIZUd4amF6Vm9ZbGRWTmtsRFpHMWFhelZzWkROT1IxcFhWbXRSTWpsMVpFaEtkbUpIZUd4amFXUmpZbTR3TjFoSE5XTmlhVXBrWmxFOVBWeHVMeThqSUhOdmRYSmpaVlZTVEQwdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyMXZaSFZzWlhNdlptWXRibVYzY3k5bVppNXVaWGR6TG1abFpXUXVaR2x5WldOMGFYWmxMbXB6SWwxOVxuLy8jIHNvdXJjZVVSTD0vVXNlcnMvcmFmYWVsZmVybmFuZGVzL1Byb2plY3RzL2ZpdC1mYWNlYm9vay93d3cvcHVibGljL21vZHVsZXMvZmYtbmV3cy9mZi5uZXdzLmZlZWQuZGlyZWN0aXZlLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGZmTmV3c1NlcnZpY2UoJGh0dHAsICR3aW5kb3csIGZmVG9rZW4pIHtcbiAgcmV0dXJuIHtcbiAgICBwb3N0OiBwb3N0LFxuICAgIGFjdGl2aXRpZXM6IGFjdGl2aXRpZXNcbiAgfTtcbiAgZnVuY3Rpb24gcG9zdChmblN1Y2Nlc3MsIGZuRXJyb3IpIHtcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2FjdGl2aXRpZXMnKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgaWYgKGZuU3VjY2Vzcykge1xuICAgICAgICBmblN1Y2Nlc3MoZGF0YSk7XG4gICAgICB9XG4gICAgfSkuZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICBpZiAoZm5FcnJvcikge1xuICAgICAgICBmbkVycm9yKGRhdGEpO1xuICAgICAgfVxuICAgICAgY29uc29sZS5sb2coJ2ZmTmV3c1NlcnZpY2UgZmFpbGVkIHRvIHBvc3QnKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhY3Rpdml0aWVzKGZuU3VjY2VzcywgZm5FcnJvcikge1xuICAgIHJldHVybiAkaHR0cC5nZXQoJy9mYWNlYm9vay9maWVsZHM9cG9zdHMubGltaXQoMTUpJykuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgIGlmIChmblN1Y2Nlc3MpIHtcbiAgICAgICAgZm5TdWNjZXNzKGRhdGEpO1xuICAgICAgfVxuICAgIH0pLmVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgaWYgKGZuRXJyb3IpIHtcbiAgICAgICAgZm5FcnJvcihkYXRhKTtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKCdmZk5ld3NTZXJ2aWNlIGZhaWxlZCB0byBnZXQgYWN0aXZpdGllcycpO1xuICAgIH0pO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IFsnJGh0dHAnLCAnJHdpbmRvdycsIGZmTmV3c1NlcnZpY2VdO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFc1bGQzTXZabVl1Ym1WM2N5NXpaWEoyYVdObExtcHpJaXdpYzI5MWNtTmxjeUk2V3lJdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyMXZaSFZzWlhNdlptWXRibVYzY3k5bVppNXVaWGR6TG5ObGNuWnBZMlV1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZCUVN4WFFVRlhMRU5CUVVNN1FVRkRXaXhQUVVGVExHTkJRVmtzUTBGQlJTeExRVUZKTEVOQlFVY3NRMEZCUVN4UFFVRk5MRU5CUVVjc1EwRkJRU3hQUVVGTkxFTkJRVWM3UVVGRE9VTXNUMEZCVHp0QlFVTk1MRTlCUVVjc1EwRkJSeXhMUVVGSE8wRkJRMVFzWVVGQlV5eERRVUZITEZkQlFWTTdRVUZCUVN4RlFVTjJRaXhEUVVGRE8wRkJRMFFzVTBGQlV5eExRVUZITEVOQlFVVXNVMEZCVVN4RFFVRkhMRU5CUVVFc1QwRkJUU3hEUVVGSE8wRkJRMmhETEZOQlFVOHNRMEZCUVN4TFFVRkpMRWxCUVVrc1FVRkJReXhEUVVGRExHbENRVUZuUWl4RFFVRkRMRkZCUVZFc1FVRkJReXhEUVVGRExGTkJRVk1zU1VGQlJ5eERRVUZITEVOQlFVRXNUVUZCU3l4RFFVRkhMRU5CUVVFc1QwRkJUU3hEUVVGSE8wRkJRekZGTEZOQlFVa3NVMEZCVVN4RFFVRkhPMEZCUTJJc1owSkJRVkVzUVVGQlF5eERRVUZETEVsQlFVY3NRMEZCUXl4RFFVRkRPMDFCUTJwQ08wRkJRVUVzU1VGRFJpeERRVUZETEUxQlFVMHNRVUZCUXl4RFFVRkRMRk5CUVZNc1NVRkJSeXhEUVVGSExFTkJRVUVzVFVGQlN5eERRVUZITEVOQlFVRXNUMEZCVFN4RFFVRkhPMEZCUTNaRExGTkJRVWtzVDBGQlRTeERRVUZITzBGQlExZ3NZMEZCVFN4QlFVRkRMRU5CUVVNc1NVRkJSeXhEUVVGRExFTkJRVU03VFVGRFpqdEJRVUZCTEVGQlEwRXNXVUZCVFN4SlFVRkpMRUZCUVVNc1EwRkJReXc0UWtGQk5rSXNRMEZCUXl4RFFVRkRPMGxCUXpkRExFTkJRVU1zUTBGQlF6dEZRVU5LTzBGQlFVRXNRVUZEUVN4VFFVRlRMRmRCUVZNc1EwRkJSU3hUUVVGUkxFTkJRVWNzUTBGQlFTeFBRVUZOTEVOQlFVYzdRVUZEZEVNc1UwRkJUeXhEUVVGQkxFdEJRVWtzU1VGQlNTeEJRVUZETEVOQlFVTXNhME5CUVdsRExFTkJRVU1zVVVGQlVTeEJRVUZETEVOQlFVTXNVMEZCVXl4SlFVRkhMRU5CUVVjc1EwRkJRU3hOUVVGTExFTkJRVWNzUTBGQlFTeFBRVUZOTEVOQlFVYzdRVUZETTBZc1UwRkJTU3hUUVVGUkxFTkJRVWM3UVVGRFlpeG5Ra0ZCVVN4QlFVRkRMRU5CUVVNc1NVRkJSeXhEUVVGRExFTkJRVU03VFVGRGFrSTdRVUZCUVN4SlFVTkdMRU5CUVVNc1RVRkJUU3hCUVVGRExFTkJRVU1zVTBGQlV5eEpRVUZITEVOQlFVY3NRMEZCUVN4TlFVRkxMRU5CUVVjc1EwRkJRU3hQUVVGTkxFTkJRVWM3UVVGRGRrTXNVMEZCU1N4UFFVRk5MRU5CUVVjN1FVRkRXQ3hqUVVGTkxFRkJRVU1zUTBGQlF5eEpRVUZITEVOQlFVTXNRMEZCUXp0TlFVTm1PMEZCUVVFc1FVRkRRU3haUVVGTkxFbEJRVWtzUVVGQlF5eERRVUZETEhkRFFVRjFReXhEUVVGRExFTkJRVU03U1VGRGRrUXNRMEZCUXl4RFFVRkRPMFZCUTBvN1FVRkJRU3hCUVVOR08wRkJRVUVzUVVGRFFTeExRVUZMTEZGQlFWRXNSVUZCU1N4RlFVRkRMRTlCUVUwc1EwRkJSeXhWUVVGUkxFTkJRVWNzWTBGQldTeERRVUZETEVOQlFVTTdRVUZIYlVRaUxDSnpiM1Z5WTJWU2IyOTBJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXNWxkM012SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1bWRXNWpkR2x2YmlCbVprNWxkM05UWlhKMmFXTmxLQ1JvZEhSd0xDQWtkMmx1Wkc5M0xDQm1abFJ2YTJWdUtTQjdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdjRzl6ZERvZ2NHOXpkQ3hjYmlBZ0lDQmhZM1JwZG1sMGFXVnpPaUJoWTNScGRtbDBhV1Z6WEc0Z0lIMDdYRzRnSUdaMWJtTjBhVzl1SUhCdmMzUW9abTVUZFdOalpYTnpMQ0JtYmtWeWNtOXlLU0I3WEc0Z0lDQWdjbVYwZFhKdUlDUm9kSFJ3TG1kbGRDZ25MMkZ3YVM5aFkzUnBkbWwwYVdWekp5a3VjM1ZqWTJWemN5aG1kVzVqZEdsdmJpaGtZWFJoTENCemRHRjBkWE1zSUdobFlXUmxjbk1wSUh0Y2JpQWdJQ0FnSUdsbUlDaG1ibE4xWTJObGMzTXBJSHRjYmlBZ0lDQWdJQ0FnWm01VGRXTmpaWE56S0dSaGRHRXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBMbVZ5Y205eUtHWjFibU4wYVc5dUtHUmhkR0VzSUhOMFlYUjFjeXdnYUdWaFpHVnljeWtnZTF4dUlDQWdJQ0FnYVdZZ0tHWnVSWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdabTVGY25KdmNpaGtZWFJoS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZG1aazVsZDNOVFpYSjJhV05sSUdaaGFXeGxaQ0IwYnlCd2IzTjBKeWs3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNiaUFnWm5WdVkzUnBiMjRnWVdOMGFYWnBkR2xsY3lobWJsTjFZMk5sYzNNc0lHWnVSWEp5YjNJcElIdGNiaUFnSUNCeVpYUjFjbTRnSkdoMGRIQXVaMlYwS0NjdlptRmpaV0p2YjJzdlptbGxiR1J6UFhCdmMzUnpMbXhwYldsMEtERTFLU2NwTG5OMVkyTmxjM01vWm5WdVkzUnBiMjRvWkdGMFlTd2djM1JoZEhWekxDQm9aV0ZrWlhKektTQjdYRzRnSUNBZ0lDQnBaaUFvWm01VGRXTmpaWE56S1NCN1hHNGdJQ0FnSUNBZ0lHWnVVM1ZqWTJWemN5aGtZWFJoS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1M1bGNuSnZjaWhtZFc1amRHbHZiaWhrWVhSaExDQnpkR0YwZFhNc0lHaGxZV1JsY25NcElIdGNiaUFnSUNBZ0lHbG1JQ2htYmtWeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUdadVJYSnliM0lvWkdGMFlTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWm1aT1pYZHpVMlZ5ZG1salpTQm1ZV2xzWldRZ2RHOGdaMlYwSUdGamRHbDJhWFJwWlhNbktUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dWZWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmJKeVJvZEhSd0p5d2dKeVIzYVc1a2IzY25MQ0JtWms1bGQzTlRaWEoyYVdObFhUdGNibHh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVpHRjBZVHBoY0hCc2FXTmhkR2x2Ymk5cWMyOXVPMkpoYzJVMk5DeGxlVW95V2xoS2VtRlhPWFZKYW05NlRFTktiV0ZYZUd4SmFtOXBUREZXZWxwWVNucE1NMHBvV20xR2JHSkhXbXhqYlRWb1ltMVNiR041T1ZGamJUbHhXbGRPTUdONU9XMWhXRkYwV20xR2FscFhTblppTW5OMlpETmtNMHd6UWpGWmJYaHdXWGs1ZEdJeVVqRmlSMVo2VERKYWJVeFhOV3hrTTAxMldtMVpkV0p0VmpOamVUVjZXbGhLTW1GWFRteE1iWEI2U1dsM2FXTXlPVEZqYlU1c1kzbEpObGQ1U1haV1dFNXNZMjVOZG1OdFJtMVpWMVp6V20xV2VXSnRSblZhUjFaNlRERkNlV0l5Y0d4Wk0xSjZUREphY0dSRE1XMVpWMDVzV1cwNWRtRjVPVE5rTTJOMlkwaFdhV0pIYkdwTU1qRjJXa2hXYzFwWVRYWmFiVmwwWW0xV00yTjVPVzFhYVRWMVdsaGtla3h1VG14amJscHdXVEpWZFdGdVRXbFlVM2RwWW0xR2RGcFlUV2xQYkhSa1RFTktkRmxZUW5kaFZ6VnVZM2xKTmtsclJrSldWVVUzVVZWR1FsRlRlRkJSVlVaVVRFZE9RbEZXYTNOUk1FWkNVbE40VEZGVlJrcE1SVTVDVVZWamMxRXdSa0pSVTNoUVVWVkdUa3hGVGtKUlZXTnpVVEJHUWxGVGVGQlJWVVpPVEVWT1FsRlZZemRSVlVaR1QxVk5jMVF3UmtKVWVuUkNVVlZPVFV4Rk9VSlJWV056VVRCR1FsSjVlRXhSVlVaSVR6QkdRbEV4VVhOWlZVWkNWWGw0UkZGVlJraE1SbVJDVVZaTk4xRlZSa0pSVTNoR1VWVk9NbEZwZUVSUlZVWkVUekJHUWxKVlVYTlZNRVpDVlhsNFRGRlZSa2hNUlU1Q1VWVlZjMVV3UmtKVlUzaEVVVlZHU0V4RlRrSlJWVVZ6VkRCR1FsUlRlRVJSVlVaSVR6QkdRbEV5YUVSTVJrNUNVVlU0YzFFd1JrSlJVM2hNVVZWR1NreEZiRUpSVld0elVWVkdRbEY1ZUVSUlZVWkVURWRzUTFGVlJtNVJhWGhFVVZWR1JFeEdSa0pSTTNCRFRFVkdRbEZWVFhOUk1FWkNVWGw0VkZGVlJsUk1SV3hDVVZWamMxRXdSa0pTZVhoRVVWVkdRa3hGTVVKUlZYTnpVVEJHUWxKNWVFUlJWVVpDVEVVNVFsRlZNSE5STUVaQ1VucDBRbEZWVGpKUmVYaFVVVlZHU2t4R1RrSlJWa1Z6VVRCR1FsSlVkRUpSVlU1aFRFZGtRMUZWUmxKTVJVWkNVVlZOYzFFd1JrSlJlWGhLVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2ZEU1UlZVNXhVV3AwUWxGVlJrSk1SV3hDVWxWWmMxRXdSa0pSZVhoT1VWVk9Ta3hGUmtKUlZVMXpVVEJHUWxGNWVGUlJWVVpVVEVWc1FsRlZZM05STUVaQ1VubDRSRkZWUmtKTVJURkNVVlZ6YzFFd1JrSlNlWGhFVVZWR1FreEZPVUpSVlRCelVUQkdRbEo2ZEVKUlZVNTVVWGw0VkZGVlJrcE1SVGxDVVZVd2MxRXdSa0pTVkhSQ1VWVk9WMHhIVGtKUlZUQnpVVlZHUWxGNWVFUlJWVVpFVEVWc1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSUE1ERkNVVEpaTjFGVlJrSlJVM2hDVVZWT1FreEdiRUpSVlRCelUxVkdRbE5UZUVKUlZVWkVURVZPUWxGVlRYTlBSVXBDVVZSYVEweEZUa0pSVlUxelVUQkdRbEY2ZEVwUlZVMHpVWGw0UkZGVlJrUk1SVTVDVVZWTk4xSlZSa1JVYW5SQ1VWVkdRa3hGUmtKU1ZVVnpWVEJHUWxWNWVGaFJWVVpVVEVWT1FsRlZWWE5WTUVaQ1ZWTjRSRkZWUmtoTVJVNUNVVlZGYzFRd1JrSlVVM2hFVVZWR1NFOHdSa0pSTTFKRVRFWk9RbEZWT0hOUk1FWkNVVk40VEZGVlJrcE1SV3hDVVZWcmMxRlZSa0pSZVhoRVVWVkdSRXhIZEVSUlZVWndVWGw0UkZGVlJrUk1Sa1pDVVhwR1JFeEZSa0pSVlUxelVUQkdRbEY1ZUZSUlZVWlVURVZzUWxGVlkzTlJNRVpDVW5sNFJGRlZSa0pNUlRGQ1VWVnpjMUV3UmtKU2VYaEVVVlZHUWt4Rk9VSlJWVEJ6VVRCR1FsSjZkRUpSVlU0eVVYbDRWRkZWUmtwTVJrNUNVVlpGYzFFd1JrSlNWSFJDVVZWT1lVeEhaRU5SVlVaU1RFVkdRbEZWVFhOUk1FWkNVWGw0U2xGVlJraE1SVTVDVVZWTmMxRXdSa0pSZW5ST1VWVk9jVkZxZEVKUlZVWkNURVZzUWxKVldYTlJNRVpDVVhsNFRsRlZUa3BNUlVaQ1VWVk5jMUV3UmtKUmVYaFVVVlZHVkV4RmJFSlJWV056VVRCR1FsSjVlRVJSVlVaQ1RFVXhRbEZWYzNOUk1FWkNVbmw0UkZGVlJrSk1SVGxDVVZVd2MxRXdSa0pTZW5SQ1VWVk9lVkY1ZUZSUlZVWktURVU1UWxGVk1ITlJNRVpDVWxSMFFsRlZUbGRNUjA1Q1VWVXdjMUZWUmtKUmVYaEVVVlZHUkV4RmJFSlJWV056VVRCR1FsRjVlRVJSVlVaRVR6QXhRbEV5V1RkUlZVWkNVVk40UWxGVlRrSk1SbXhDVVZVd2MxTlZSa0pUVTNoQ1VWVkdSRXhGVGtKUlZVMXpaREJPUWxGWVZrUk1SVTVDVVZWTmMxRXdSa0pSZW5SS1VWVk9NbEpEZUVSUlZVWkVURVZPUWxGVlRUZFNWVVpFVkdwMFFsRlZSa0pNUlVaQ1VUQlpOMUZWUmtKUlUzaENVVlZXUWt4RmRFSlJWWE56VlZWR1FsVlRlRVpSVlVaS1RFVldRbEZWVFhOVU1FWkNWRk40UkZGVlJraE1SbFpDVVZaRmMxRXdSa0pTZVhocVVWVkdXa3hGVGtKUlZVMXpVVEJHUWxGNmRFSlJWVlozVWtOSmMwbHVUblprV0VwcVdsWktkbUl6VVdsUGFVbDJWbGhPYkdOdVRYWmpiVVp0V1ZkV2MxcHRWbmxpYlVaMVdrZFdla3d4UW5saU1uQnNXVE5TZWt3eVduQmtRekZ0V1ZkT2JGbHRPWFpoZVRrelpETmpkbU5JVm1saVIyeHFUREl4ZGxwSVZuTmFXRTEyV20xWmRHSnRWak5qZVRocFRFTktlbUl6Vm5sWk1sWjZVVEk1ZFdSSFZuVmtRMGsyVjNsSmRrdHBjR05pYVVGeFNVWk9iR051V25CWk1sVm5ZMjFXZW1OSE9YVmpNbXhwWWtkVloxcHRPWGxKUnpWc1pETk9ZMkpwUVhGWVJ6Um5TMmxDUVdNeVZteEpSMXB0VEcwMWJHUXpUazVpTWxJeFlrZFdZMkpwUVhGSlJVSnJXVmhTYkU5cFFYbE5SRVV4VEhwQk5FeDZRWGhZUnpSblMybENRVnBZYUdoaVdFSnpXbFJ2WjFoSE5HZExhVUU0V20xWmRHSnRWak5qZVRGdFdsZFdhMUJwUVRoTU1scHRURmMxYkdRelRYUmFiVlpzV2tRMVkySnBRWEZKUXpoMlNVaEtiR1JJVm5saWJrMW5aRWRvYkVsSVpHOWlNbmhzU1VjMWJHUXpUV2RhYlZac1drTTFZMkpwUVhGWVJ6Um5TMms1WTJKdFdqRmliVTR3WVZjNWRVbEhXbTFVYlZZell6Rk9iR051V25CWk1sVnZTa2RvTUdSSVFYTkpRMUl6WVZjMWEySXpZM05KUjFwdFZrYzVjbHBYTkhCSlNIUmpZbXg0ZFVsRFFubGFXRkl4WTIwMFoyVXhlSFZKUTBGblNVaENkbU16VVRaSlNFSjJZek5SYzFoSE5HZEpRMEZuV1ZkT01HRllXbkJrUjJ4c1kzcHZaMWxYVGpCaFdGcHdaRWRzYkdNeGVIVkpRMEk1VHpGNGRWaEhOR2RKUjFveFltMU9NR0ZYT1hWSlNFSjJZek5SYjFwdE5WUmtWMDVxV2xoT2VreERRbTFpYTFaNVkyMDVlVXRUUWpkWVJ6Um5TVU5CWjJOdFZqQmtXRXAxU1VOU2IyUklVbmRNYldSc1pFTm5ia3d5Um5kaFV6bG9XVE5TY0dSdGJEQmhWMVo2U25sc1kySnBRV2RKUTBGblNVTTFlbVJYVG1wYVdFNTZTMGRhTVdKdFRqQmhWemwxUzBkU2FHUkhSWE5KU0U0d1dWaFNNV041ZDJkaFIxWm9Xa2RXZVdONWEyZGxNWGgxU1VOQlowbERRV2RKUTBKd1dtbEJiMXB0TlZSa1YwNXFXbGhPZWt0WWRHTmlhVUZuU1VOQlowbERRV2RKUTBKdFlteE9NVmt5VG14ak0wMXZXa2RHTUZsVGF6ZFlSelJuU1VOQlowbERRV2RKU0RGalltbEJaMGxEUVdkSlEwRm5USGs0WjFreU9YVmpNamx6V2xNMWMySXlZMjlLTWs1MlltMWFjRm96Vm5sWldGSndZakkwWjJKSE9XaGFSMVpyU25sck4xaElVV2RKUTBGbldFYzBaMGxEUVdkSlEwSTVTMVo0ZFVsRFFXZEpRMEZuVEcxV2VXTnRPWGxMUjFveFltMU9NR0ZYT1hWTFIxSm9aRWRGYzBsSVRqQlpXRkl4WTNsM1oyRkhWbWhhUjFaNVkzbHJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFuQmFhVUZ2V20wMVJtTnVTblpqYVd3M1dFYzBaMGxEUVdkSlEwRm5TVU5CWjFwdE5VWmpia3AyWTJsb2ExbFlVbWhMVkhSalltbEJaMGxEUVdkSlEwRm5abFo0ZFVsRFFXZEpRMEZuU1VOQ2FtSXlOWHBpTW5oc1RHMTRkbHA1WjI1YWJWcFBXbGhrZWxVeVZubGtiV3hxV2xOQ2JWbFhiSE5hVjFGblpFYzRaMk5IT1hwa1EyTndUekY0ZFVsRFFXZEpRMEZuWmxOck4xaEhOR2RKU0RGallteDRkVWxEUW0xa1Z6VnFaRWRzZG1KcFFtaFpNMUp3Wkcxc01HRlhWbnBMUjFwMVZUTldhbGt5Vm5wamVYZG5XbTAxUm1OdVNuWmphV3RuWlRGNGRVbERRV2RKU0Vwc1pFaFdlV0pwUVd0aFNGSXdZME0xYmxwWVVXOUtlVGx0V1ZkT2JGbHRPWFpoZVRsdFlWZFdjMXBJVFRsalJ6bDZaRWhOZFdKSGJIUmhXRkZ2VFZSVmNFcDViR05pYVVGblNVTkJaMGxETlhwa1YwNXFXbGhPZWt0SFdqRmliVTR3WVZjNWRVdEhVbWhrUjBWelNVaE9NRmxZVWpGamVYZG5ZVWRXYUZwSFZubGplV3RuWlRGNGRVbERRV2RKUTBGblNVTkNjRnBwUVc5YWJUVlVaRmRPYWxwWVRucExXSFJqWW1sQlowbERRV2RKUTBGblNVTkNiV0pzVGpGWk1rNXNZek5OYjFwSFJqQlpVMnMzV0VjMFowbERRV2RKUTBGblNVZ3hZMkpwUVdkSlEwRm5TVU5CWjB4NU9HZFpNamwxWXpJNWMxcFROWE5pTW1OdlNqSk9kbUp0V25CYU0xWjVXVmhTY0dJeU5HZGlSemxvV2tkV2EwcDVhemRZU0ZGblNVTkJaMWhITkdkSlEwRm5TVU5DT1V0V2VIVkpRMEZuU1VOQloweHRWbmxqYlRsNVMwZGFNV0p0VGpCaFZ6bDFTMGRTYUdSSFJYTkpTRTR3V1ZoU01XTjVkMmRoUjFab1drZFdlV041YTJkbE1YaDFTVU5CWjBsRFFXZEpRMEp3V21sQmIxcHROVVpqYmtwMlkybHNOMWhITkdkSlEwRm5TVU5CWjBsRFFXZGFiVFZHWTI1S2RtTnBhR3RaV0ZKb1MxUjBZMkpwUVdkSlEwRm5TVU5CWjJaV2VIVkpRMEZuU1VOQlowbERRbXBpTWpWNllqSjRiRXh0ZUhaYWVXZHVXbTFhVDFwWVpIcFZNbFo1Wkcxc2FscFRRbTFaVjJ4eldsZFJaMlJIT0dkYU1sWXdTVWRHYW1SSGJESmhXRkp3V2xoTmJrdFVkR05pYVVGblNVTkJaMGxJTUhCUE1YaDFTVU5DT1ZoSE5UbFlSelZqWW0weGRscElWbk5hVXpWc1pVaENkbU51VW5wSlJEQm5WM2xqYTJGSVVqQmpRMk56U1VOamEyUXliSFZhUnprelNubDNaMXB0V2s5YVdHUjZWVEpXZVdSdGJHcGFWakEzV0VjMVkySnBTbVJtVVQwOVhHNHZMeU1nYzI5MWNtTmxWVkpNUFM5VmMyVnljeTl5WVdaaFpXeG1aWEp1WVc1a1pYTXZVSEp2YW1WamRITXZabWwwTFdaaFkyVmliMjlyTDNkM2R5OXdkV0pzYVdNdmJXOWtkV3hsY3k5bVppMXVaWGR6TDJabUxtNWxkM011YzJWeWRtbGpaUzVxY3lKZGZRPT1cbi8vIyBzb3VyY2VVUkw9L1VzZXJzL3JhZmFlbGZlcm5hbmRlcy9Qcm9qZWN0cy9maXQtZmFjZWJvb2svd3d3L3B1YmxpYy9tb2R1bGVzL2ZmLW5ld3MvZmYubmV3cy5zZXJ2aWNlLmpzIl19
